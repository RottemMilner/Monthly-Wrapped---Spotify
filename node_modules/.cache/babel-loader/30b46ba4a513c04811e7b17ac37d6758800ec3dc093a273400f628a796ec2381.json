{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nmiln\\\\my-app\\\\src\\\\components\\\\TopTracks.js\",\n  _s = $RefreshSig$();\n// components/TopTracks/TopTracks.js\n\nimport React, { useState, useEffect } from 'react';\nimport spotifyApi from '../spotifyAuth';\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction TopTracks({\n  user,\n  setFavorites\n}) {\n  _s();\n  const [topTracks, setTopTracks] = useState([]);\n  const [favorites, setFavoritesState] = useState([]);\n  const [showHeadline, setShowHeadline] = useState(false);\n  const [newPlaylistId, setNewPlaylistId] = useState(null);\n  useEffect(() => {\n    // Load favorites from localStorage on component mount\n    const storedFavorites = JSON.parse(localStorage.getItem('favorites')) || [];\n    setFavoritesState(storedFavorites);\n    setFavorites(storedFavorites);\n\n    // Fetch the user's top tracks\n    spotifyApi.getMyTopTracks({\n      limit: 50,\n      time_range: 'short_term'\n    }).then(response => {\n      setTopTracks(response.items);\n      setShowHeadline(true); // Set to true after fetching data\n    });\n  }, [setFavorites]);\n  const isTrackInFavorites = track => {\n    return favorites && favorites.some(fav => fav.id === track.id);\n  };\n  const handleAddToFavorites = track => {\n    setFavoritesState(prevFavorites => {\n      const newFavorites = Array.isArray(prevFavorites) ? [...prevFavorites] : [];\n      newFavorites.push(track);\n      localStorage.setItem('favorites', JSON.stringify(newFavorites)); // Save to localStorage\n      return newFavorites;\n    });\n    setFavorites(prevFavorites => {\n      const newFavorites = Array.isArray(prevFavorites) ? [...prevFavorites] : [];\n      newFavorites.push(track);\n      return newFavorites;\n    });\n  };\n  const handleRemoveFromFavorites = track => {\n    setFavoritesState(prevFavorites => {\n      const newFavorites = Array.isArray(prevFavorites) ? prevFavorites.filter(fav => fav.id !== track.id) : [];\n      localStorage.setItem('favorites', JSON.stringify(newFavorites)); // Save to localStorage\n      return newFavorites;\n    });\n    setFavorites(prevFavorites => {\n      return Array.isArray(prevFavorites) ? prevFavorites.filter(fav => fav.id !== track.id) : [];\n    });\n  };\n  const createPlaylist = async () => {\n    try {\n      // Step 1: Create a new playlist\n      const response = await spotifyApi.createPlaylist(user.id, {\n        name: 'Top Tracks Playlist',\n        description: 'A playlist generated from Top Tracks this month.',\n        public: false // Set to true if you want the playlist to be public\n      });\n\n      // Step 2: Get the new playlist ID\n      const playlistId = response.id;\n      setNewPlaylistId(playlistId);\n\n      // Step 3: Get track URIs from Top Tracks\n      const trackUris = topTracks.map(track => track.uri);\n\n      // Step 4: Add tracks to the new playlist\n      await spotifyApi.addTracksToPlaylist(playlistId, trackUris);\n      console.log('Playlist created successfully!');\n    } catch (error) {\n      console.error('Error creating playlist:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [showHeadline && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Top Tracks\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: createPlaylist,\n        children: \"Create Playlist\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"top-tracks-list\",\n      children: topTracks.map(track => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"top-tracks-item\",\n        children: [track.album.images.length > 0 && /*#__PURE__*/_jsxDEV(\"img\", {\n          src: track.album.images[2].url // Assuming you want to display the album art\n          ,\n          alt: track.name,\n          className: \"track-image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"track-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"track-name\",\n            children: track.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"artists\",\n            children: track.artists.map(artist => artist.name).join(', ')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 15\n          }, this), isTrackInFavorites(track) ? /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleRemoveFromFavorites(track),\n            className: \"remove-from-favorites-button\",\n            children: \"Remove from Favorites\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleAddToFavorites(track),\n            className: \"add-to-favorites-button\",\n            children: \"Add to Favorites\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this)]\n      }, track.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n}\n_s(TopTracks, \"zyTWGkj1KfEGCHPHiQi3aY6YzsE=\");\n_c = TopTracks;\nTopTracks.propTypes = {\n  setFavorites: PropTypes.func.isRequired\n};\nexport default TopTracks;\nvar _c;\n$RefreshReg$(_c, \"TopTracks\");","map":{"version":3,"names":["React","useState","useEffect","spotifyApi","PropTypes","jsxDEV","_jsxDEV","Fragment","_Fragment","TopTracks","user","setFavorites","_s","topTracks","setTopTracks","favorites","setFavoritesState","showHeadline","setShowHeadline","newPlaylistId","setNewPlaylistId","storedFavorites","JSON","parse","localStorage","getItem","getMyTopTracks","limit","time_range","then","response","items","isTrackInFavorites","track","some","fav","id","handleAddToFavorites","prevFavorites","newFavorites","Array","isArray","push","setItem","stringify","handleRemoveFromFavorites","filter","createPlaylist","name","description","public","playlistId","trackUris","map","uri","addTracksToPlaylist","console","log","error","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","className","album","images","length","src","url","alt","artists","artist","join","_c","propTypes","func","isRequired","$RefreshReg$"],"sources":["C:/Users/nmiln/my-app/src/components/TopTracks.js"],"sourcesContent":["// components/TopTracks/TopTracks.js\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport spotifyApi from '../spotifyAuth';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction TopTracks({ user, setFavorites }) {\r\n  const [topTracks, setTopTracks] = useState([]);\r\n  const [favorites, setFavoritesState] = useState([]);\r\n  const [showHeadline, setShowHeadline] = useState(false);\r\n\r\n  const [newPlaylistId, setNewPlaylistId] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Load favorites from localStorage on component mount\r\n    const storedFavorites = JSON.parse(localStorage.getItem('favorites')) || [];\r\n    setFavoritesState(storedFavorites);\r\n    setFavorites(storedFavorites);\r\n\r\n    // Fetch the user's top tracks\r\n    spotifyApi.getMyTopTracks({ limit: 50, time_range: 'short_term' }).then((response) => {\r\n      setTopTracks(response.items);\r\n      setShowHeadline(true); // Set to true after fetching data\r\n    });\r\n  }, [setFavorites]);\r\n\r\n  const isTrackInFavorites = (track) => {\r\n    return favorites && favorites.some((fav) => fav.id === track.id);\r\n  };\r\n\r\n  const handleAddToFavorites = (track) => {\r\n    setFavoritesState((prevFavorites) => {\r\n      const newFavorites = Array.isArray(prevFavorites) ? [...prevFavorites] : [];\r\n      newFavorites.push(track);\r\n      localStorage.setItem('favorites', JSON.stringify(newFavorites)); // Save to localStorage\r\n      return newFavorites;\r\n    });\r\n\r\n    setFavorites((prevFavorites) => {\r\n      const newFavorites = Array.isArray(prevFavorites) ? [...prevFavorites] : [];\r\n      newFavorites.push(track);\r\n      return newFavorites;\r\n    });\r\n  };\r\n\r\n  const handleRemoveFromFavorites = (track) => {\r\n    setFavoritesState((prevFavorites) => {\r\n      const newFavorites = Array.isArray(prevFavorites)\r\n        ? prevFavorites.filter((fav) => fav.id !== track.id)\r\n        : [];\r\n      localStorage.setItem('favorites', JSON.stringify(newFavorites)); // Save to localStorage\r\n      return newFavorites;\r\n    });\r\n\r\n    setFavorites((prevFavorites) => {\r\n      return Array.isArray(prevFavorites)\r\n        ? prevFavorites.filter((fav) => fav.id !== track.id)\r\n        : [];\r\n    });\r\n  };\r\n\r\n  const createPlaylist = async () => {\r\n    try {\r\n      // Step 1: Create a new playlist\r\n      const response = await spotifyApi.createPlaylist(user.id, {\r\n        name: 'Top Tracks Playlist',\r\n        description: 'A playlist generated from Top Tracks this month.',\r\n        public: false, // Set to true if you want the playlist to be public\r\n      });\r\n\r\n      // Step 2: Get the new playlist ID\r\n      const playlistId = response.id;\r\n      setNewPlaylistId(playlistId);\r\n\r\n      // Step 3: Get track URIs from Top Tracks\r\n      const trackUris = topTracks.map((track) => track.uri);\r\n\r\n      // Step 4: Add tracks to the new playlist\r\n      await spotifyApi.addTracksToPlaylist(playlistId, trackUris);\r\n\r\n      console.log('Playlist created successfully!');\r\n    } catch (error) {\r\n      console.error('Error creating playlist:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {showHeadline &&(\r\n        <>\r\n          <h2>Top Tracks</h2>\r\n          <button onClick={createPlaylist}>Create Playlist</button>\r\n        </>\r\n      )}\r\n      <ul className=\"top-tracks-list\">\r\n        {topTracks.map((track) => (\r\n          <li key={track.id} className=\"top-tracks-item\">\r\n            {track.album.images.length > 0 && (\r\n              <img\r\n                src={track.album.images[2].url} // Assuming you want to display the album art\r\n                alt={track.name}\r\n                className=\"track-image\"\r\n              />\r\n            )}\r\n            <div className=\"track-info\">\r\n              <p className=\"track-name\">{track.name}</p>\r\n              <p className=\"artists\">{track.artists.map((artist) => artist.name).join(', ')}</p>\r\n              {isTrackInFavorites(track) ? (\r\n                <button\r\n                  onClick={() => handleRemoveFromFavorites(track)}\r\n                  className=\"remove-from-favorites-button\"\r\n                >\r\n                  Remove from Favorites\r\n                </button>\r\n              ) : (\r\n                <button\r\n                  onClick={() => handleAddToFavorites(track)}\r\n                  className=\"add-to-favorites-button\"\r\n                >\r\n                  Add to Favorites\r\n                </button>\r\n              )}\r\n            </div>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nTopTracks.propTypes = {\r\n  setFavorites: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default TopTracks;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}