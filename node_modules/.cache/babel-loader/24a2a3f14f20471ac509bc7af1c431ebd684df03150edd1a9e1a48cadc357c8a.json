{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nmiln\\\\my-app\\\\src\\\\components\\\\RecentlyPlayed.js\",\n  _s = $RefreshSig$();\n// components/RecentlyPlayed/RecentlyPlayed.js\n\nimport React, { useState, useEffect } from 'react';\nimport spotifyApi from '../spotifyAuth';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction RecentlyPlayed() {\n  _s();\n  const [recentlyPlayed, setRecentlyPlayed] = useState([]);\n  const [showHeadline, setShowHeadline] = useState(false);\n  const [favorites, setFavorites] = useState([]);\n  useEffect(() => {\n    // Fetch the user's recently played tracks\n    spotifyApi.getMyRecentlyPlayedTracks({\n      limit: 50\n    }).then(response => {\n      setRecentlyPlayed(response.items);\n      setShowHeadline(true); // Set to true after fetching data\n    });\n  }, []);\n  const markAsFavorite = track => {\n    // Check if the track is already marked as a favorite\n    const isFavorite = favorites.some(fav => fav.id === track.track.id);\n    if (!isFavorite) {\n      // Add the track to the favorites list\n      setFavorites(prevFavorites => [...prevFavorites, track.track]);\n    } else {\n      // Remove the track from the favorites list\n      setFavorites(prevFavorites => prevFavorites.filter(fav => fav.id !== track.track.id));\n    }\n  };\n  const createPlaylist = () => {\n    // Ensure there are favorite songs to create a playlist\n    if (favorites.length === 0) {\n      alert('Please mark some songs as favorites before creating a playlist.');\n      return;\n    }\n\n    // Get the user's Spotify ID\n    spotifyApi.getMe().then(userData => {\n      const userId = userData.id;\n\n      // Create a new playlist\n      spotifyApi.createPlaylist(userId, {\n        name: 'My Favorite Songs',\n        public: false // Set to true if you want the playlist to be public\n      }).then(playlistData => {\n        const playlistId = playlistData.id;\n\n        // Add the selected favorite songs to the playlist\n        const trackUris = favorites.map(fav => fav.uri);\n        spotifyApi.addTracksToPlaylist(userId, playlistId, trackUris).then(() => {\n          alert('Playlist created successfully!');\n        });\n      });\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [showHeadline && /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Recently Played\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"recently-played-list\",\n      children: recentlyPlayed.map(track => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"recently-played-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => markAsFavorite(track),\n          children: favorites.some(fav => fav.id === track.track.id) ? 'V' : ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: track.track.album.images[2].url // Assuming you want to display the album art\n          ,\n          alt: track.track.name,\n          className: \"album-art\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"track-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"track-name\",\n            children: track.track.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"artists\",\n            children: track.track.artists.map(artist => artist.name).join(', ')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this)]\n      }, track.track.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: createPlaylist,\n      children: \"Create Playlist\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Favorites\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: favorites.map(fav => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: fav.name\n        }, fav.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n_s(RecentlyPlayed, \"I7IOwjymGkVV9BFiJUnqXn0C6FE=\");\n_c = RecentlyPlayed;\nexport default RecentlyPlayed;\nvar _c;\n$RefreshReg$(_c, \"RecentlyPlayed\");","map":{"version":3,"names":["React","useState","useEffect","spotifyApi","jsxDEV","_jsxDEV","RecentlyPlayed","_s","recentlyPlayed","setRecentlyPlayed","showHeadline","setShowHeadline","favorites","setFavorites","getMyRecentlyPlayedTracks","limit","then","response","items","markAsFavorite","track","isFavorite","some","fav","id","prevFavorites","filter","createPlaylist","length","alert","getMe","userData","userId","name","public","playlistData","playlistId","trackUris","map","uri","addTracksToPlaylist","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","src","album","images","url","alt","artists","artist","join","_c","$RefreshReg$"],"sources":["C:/Users/nmiln/my-app/src/components/RecentlyPlayed.js"],"sourcesContent":["// components/RecentlyPlayed/RecentlyPlayed.js\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport spotifyApi from '../spotifyAuth';\r\n\r\nfunction RecentlyPlayed() {\r\n  const [recentlyPlayed, setRecentlyPlayed] = useState([]);\r\n  const [showHeadline, setShowHeadline] = useState(false);\r\n  const [favorites, setFavorites] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Fetch the user's recently played tracks\r\n    spotifyApi.getMyRecentlyPlayedTracks({ limit: 50 }).then((response) => {\r\n      setRecentlyPlayed(response.items);\r\n      setShowHeadline(true); // Set to true after fetching data\r\n    });\r\n  }, []);\r\n\r\n  const markAsFavorite = (track) => {\r\n    // Check if the track is already marked as a favorite\r\n    const isFavorite = favorites.some((fav) => fav.id === track.track.id);\r\n\r\n    if (!isFavorite) {\r\n      // Add the track to the favorites list\r\n      setFavorites((prevFavorites) => [...prevFavorites, track.track]);\r\n    } else {\r\n      // Remove the track from the favorites list\r\n      setFavorites((prevFavorites) => prevFavorites.filter((fav) => fav.id !== track.track.id));\r\n    }\r\n  };\r\n\r\n  const createPlaylist = () => {\r\n    // Ensure there are favorite songs to create a playlist\r\n    if (favorites.length === 0) {\r\n      alert('Please mark some songs as favorites before creating a playlist.');\r\n      return;\r\n    }\r\n\r\n    // Get the user's Spotify ID\r\n    spotifyApi.getMe().then((userData) => {\r\n      const userId = userData.id;\r\n\r\n      // Create a new playlist\r\n      spotifyApi.createPlaylist(userId, {\r\n        name: 'My Favorite Songs',\r\n        public: false, // Set to true if you want the playlist to be public\r\n      }).then((playlistData) => {\r\n        const playlistId = playlistData.id;\r\n\r\n        // Add the selected favorite songs to the playlist\r\n        const trackUris = favorites.map((fav) => fav.uri);\r\n        spotifyApi.addTracksToPlaylist(userId, playlistId, trackUris).then(() => {\r\n          alert('Playlist created successfully!');\r\n        });\r\n      });\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {showHeadline && <h2>Recently Played</h2>}\r\n      <ul className=\"recently-played-list\">\r\n        {recentlyPlayed.map((track) => (\r\n          <li key={track.track.id} className=\"recently-played-item\">\r\n            <button onClick={() => markAsFavorite(track)}>\r\n              {favorites.some((fav) => fav.id === track.track.id) ? 'V' : ''}\r\n            </button>\r\n            <img\r\n              src={track.track.album.images[2].url} // Assuming you want to display the album art\r\n              alt={track.track.name}\r\n              className=\"album-art\"\r\n            />\r\n            <div className=\"track-info\">\r\n              <p className=\"track-name\">{track.track.name}</p>\r\n              <p className=\"artists\">{track.track.artists.map((artist) => artist.name).join(', ')}</p>\r\n            </div>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      {/* Display the \"Create Playlist\" button */}\r\n      <button onClick={createPlaylist}>Create Playlist</button>\r\n      {/* Display the favorites list */}\r\n      <div>\r\n        <h2>Favorites</h2>\r\n        <ul>\r\n          {favorites.map((fav) => (\r\n            <li key={fav.id}>{fav.name}</li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RecentlyPlayed;\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}