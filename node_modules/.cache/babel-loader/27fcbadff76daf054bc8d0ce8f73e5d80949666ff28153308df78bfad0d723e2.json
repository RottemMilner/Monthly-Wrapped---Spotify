{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nmiln\\\\my-app\\\\src\\\\components\\\\TopTracks.js\",\n  _s = $RefreshSig$();\n// components/TopTracks/TopTracks.js\n\nimport React, { useState, useEffect } from 'react';\nimport spotifyApi from '../spotifyAuth';\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TopTracks({\n  user,\n  setFavorites\n}) {\n  _s();\n  const [topTracks, setTopTracks] = useState([]);\n  const [favorites, setFavoritesState] = useState([]);\n  const [showHeadline, setShowHeadline] = useState(false);\n  const [playlistId, setPlaylistId] = useState(null);\n  const [newPlaylistId, setNewPlaylistId] = useState(null);\n  useEffect(() => {\n    // Load favorites from localStorage on component mount\n    const storedFavorites = JSON.parse(localStorage.getItem('favorites')) || [];\n    setFavoritesState(storedFavorites);\n    setFavorites(storedFavorites);\n\n    // Fetch the user's top tracks\n    spotifyApi.getMyTopTracks({\n      limit: 50,\n      time_range: 'short_term'\n    }).then(response => {\n      setTopTracks(response.items);\n      setShowHeadline(true); // Set to true after fetching data\n    });\n  }, [user, setFavorites]);\n  const isTrackInFavorites = track => {\n    return favorites && favorites.some(fav => fav.id === track.id);\n  };\n  const handleAddToFavorites = track => {\n    setFavoritesState(prevFavorites => {\n      const newFavorites = Array.isArray(prevFavorites) ? [...prevFavorites] : [];\n      newFavorites.push(track);\n      localStorage.setItem('favorites', JSON.stringify(newFavorites)); // Save to localStorage\n      return newFavorites;\n    });\n    setFavorites(prevFavorites => {\n      const newFavorites = Array.isArray(prevFavorites) ? [...prevFavorites] : [];\n      newFavorites.push(track);\n      return newFavorites;\n    });\n  };\n  const handleRemoveFromFavorites = track => {\n    setFavoritesState(prevFavorites => {\n      const newFavorites = Array.isArray(prevFavorites) ? prevFavorites.filter(fav => fav.id !== track.id) : [];\n      localStorage.setItem('favorites', JSON.stringify(newFavorites)); // Save to localStorage\n      return newFavorites;\n    });\n    setFavorites(prevFavorites => {\n      return Array.isArray(prevFavorites) ? prevFavorites.filter(fav => fav.id !== track.id) : [];\n    });\n  };\n  const getCurrentMonthAndYear = () => {\n    const currentDate = new Date();\n    const monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n    const currentMonth = monthNames[currentDate.getMonth()];\n    const currentYear = currentDate.getFullYear();\n    return `${currentMonth} ${currentYear}`;\n  };\n  const handleCreatePlaylist = async () => {\n    // Implement logic to create a playlist with top tracks\n    // Use the user.id, topTracks, and Spotify API\n    // Example:\n    const playlistName = `Top Tracks of ${getCurrentMonthAndYear()}`;\n    spotifyApi.createPlaylist(user.id, {\n      name: playlistName,\n      public: false,\n      // Set to true if you want the playlist to be public\n      description: 'A playlist of your top tracks in ${getCurrentMonthAndYear()}'\n    }).then(playlist => {\n      setPlaylistId(playlist.id); // Store the playlist ID\n      const trackUris = topTracks.map(track => track.uri);\n      spotifyApi.addTracksToPlaylist(playlist.id, trackUris).then(() => {\n        // Playlist created successfully\n        console.log('Playlist created successfully!');\n      });\n    });\n  };\n  const handleDeletePlaylist = () => {\n    // Delete the playlist using the stored playlistId\n    if (playlistId) {\n      spotifyApi.unfollowPlaylist(playlistId).then(() => {\n        // Playlist deleted successfully\n        console.log('Playlist deleted successfully!');\n        setPlaylistId(null); // Reset the playlist ID in the state\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [showHeadline && /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Top Tracks\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 24\n    }, this), playlistId ? /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleDeletePlaylist,\n      className: \"remove-from-favorites-button\",\n      children: \"Delete Playlist\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleCreatePlaylist,\n      className: \"add-to-favorites-button\",\n      children: \"Create Playlist\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"top-tracks-list\",\n      children: topTracks.map(track => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"top-tracks-item\",\n        children: [track.album.images.length > 0 && /*#__PURE__*/_jsxDEV(\"img\", {\n          src: track.album.images[2].url // Assuming you want to display the album art\n          ,\n          alt: track.name,\n          className: \"track-image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"track-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"track-name\",\n            children: track.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"artists\",\n            children: track.artists.map(artist => artist.name).join(', ')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 15\n          }, this), isTrackInFavorites(track) ? /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleRemoveFromFavorites(track),\n            className: \"remove-from-favorites-button\",\n            children: \"Remove from Favorites\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleAddToFavorites(track),\n            className: \"add-to-favorites-button\",\n            children: \"Add to Favorites\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 13\n        }, this)]\n      }, track.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n}\n_s(TopTracks, \"RyofMmgqZMZ6NXx32V86IvEJ1GA=\");\n_c = TopTracks;\nTopTracks.propTypes = {\n  user: PropTypes.object.isRequired,\n  setFavorites: PropTypes.func.isRequired\n};\nexport default TopTracks;\nvar _c;\n$RefreshReg$(_c, \"TopTracks\");","map":{"version":3,"names":["React","useState","useEffect","spotifyApi","PropTypes","jsxDEV","_jsxDEV","TopTracks","user","setFavorites","_s","topTracks","setTopTracks","favorites","setFavoritesState","showHeadline","setShowHeadline","playlistId","setPlaylistId","newPlaylistId","setNewPlaylistId","storedFavorites","JSON","parse","localStorage","getItem","getMyTopTracks","limit","time_range","then","response","items","isTrackInFavorites","track","some","fav","id","handleAddToFavorites","prevFavorites","newFavorites","Array","isArray","push","setItem","stringify","handleRemoveFromFavorites","filter","getCurrentMonthAndYear","currentDate","Date","monthNames","currentMonth","getMonth","currentYear","getFullYear","handleCreatePlaylist","playlistName","createPlaylist","name","public","description","playlist","trackUris","map","uri","addTracksToPlaylist","console","log","handleDeletePlaylist","unfollowPlaylist","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","className","album","images","length","src","url","alt","artists","artist","join","_c","propTypes","object","isRequired","func","$RefreshReg$"],"sources":["C:/Users/nmiln/my-app/src/components/TopTracks.js"],"sourcesContent":["// components/TopTracks/TopTracks.js\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport spotifyApi from '../spotifyAuth';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction TopTracks({ user, setFavorites }) {\r\n  const [topTracks, setTopTracks] = useState([]);\r\n  const [favorites, setFavoritesState] = useState([]);\r\n  const [showHeadline, setShowHeadline] = useState(false);\r\n  const [playlistId, setPlaylistId] = useState(null);\r\n\r\n  const [newPlaylistId, setNewPlaylistId] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Load favorites from localStorage on component mount\r\n    const storedFavorites = JSON.parse(localStorage.getItem('favorites')) || [];\r\n    setFavoritesState(storedFavorites);\r\n    setFavorites(storedFavorites);\r\n\r\n    // Fetch the user's top tracks\r\n    spotifyApi.getMyTopTracks({ limit: 50, time_range: 'short_term' }).then((response) => {\r\n      setTopTracks(response.items);\r\n      setShowHeadline(true); // Set to true after fetching data\r\n    });\r\n  }, [user, setFavorites]);\r\n\r\n  const isTrackInFavorites = (track) => {\r\n    return favorites && favorites.some((fav) => fav.id === track.id);\r\n  };\r\n\r\n  const handleAddToFavorites = (track) => {\r\n    setFavoritesState((prevFavorites) => {\r\n      const newFavorites = Array.isArray(prevFavorites) ? [...prevFavorites] : [];\r\n      newFavorites.push(track);\r\n      localStorage.setItem('favorites', JSON.stringify(newFavorites)); // Save to localStorage\r\n      return newFavorites;\r\n    });\r\n\r\n    setFavorites((prevFavorites) => {\r\n      const newFavorites = Array.isArray(prevFavorites) ? [...prevFavorites] : [];\r\n      newFavorites.push(track);\r\n      return newFavorites;\r\n    });\r\n  };\r\n\r\n  const handleRemoveFromFavorites = (track) => {\r\n    setFavoritesState((prevFavorites) => {\r\n      const newFavorites = Array.isArray(prevFavorites)\r\n        ? prevFavorites.filter((fav) => fav.id !== track.id)\r\n        : [];\r\n      localStorage.setItem('favorites', JSON.stringify(newFavorites)); // Save to localStorage\r\n      return newFavorites;\r\n    });\r\n\r\n    setFavorites((prevFavorites) => {\r\n      return Array.isArray(prevFavorites)\r\n        ? prevFavorites.filter((fav) => fav.id !== track.id)\r\n        : [];\r\n    });\r\n  };\r\n\r\n  const getCurrentMonthAndYear = () => {\r\n    const currentDate = new Date();\r\n    const monthNames = [\r\n      'January', 'February', 'March', 'April', 'May', 'June',\r\n      'July', 'August', 'September', 'October', 'November', 'December'\r\n    ];\r\n\r\n    const currentMonth = monthNames[currentDate.getMonth()];\r\n    const currentYear = currentDate.getFullYear();\r\n\r\n    return `${currentMonth} ${currentYear}`;\r\n  };\r\n\r\n  const handleCreatePlaylist = async () => {\r\n    // Implement logic to create a playlist with top tracks\r\n    // Use the user.id, topTracks, and Spotify API\r\n    // Example:\r\n    const playlistName = `Top Tracks of ${getCurrentMonthAndYear()}`;\r\n    spotifyApi.createPlaylist(user.id, {\r\n      name: playlistName,\r\n      public: false, // Set to true if you want the playlist to be public\r\n      description: 'A playlist of your top tracks in ${getCurrentMonthAndYear()}',\r\n    }).then((playlist) => {\r\n      setPlaylistId(playlist.id); // Store the playlist ID\r\n      const trackUris = topTracks.map((track) => track.uri);\r\n      spotifyApi.addTracksToPlaylist(playlist.id, trackUris).then(() => {\r\n        // Playlist created successfully\r\n        console.log('Playlist created successfully!');\r\n      });\r\n    });\r\n  };\r\n\r\n  const handleDeletePlaylist = () => {\r\n    // Delete the playlist using the stored playlistId\r\n    if (playlistId) {\r\n      spotifyApi.unfollowPlaylist(playlistId).then(() => {\r\n        // Playlist deleted successfully\r\n        console.log('Playlist deleted successfully!');\r\n        setPlaylistId(null); // Reset the playlist ID in the state\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {showHeadline && <h2>Top Tracks</h2>}\r\n      {playlistId ? (\r\n        <button onClick={handleDeletePlaylist} className=\"remove-from-favorites-button\">Delete Playlist</button>\r\n      ) : (\r\n        <button onClick={handleCreatePlaylist} className=\"add-to-favorites-button\">Create Playlist</button>\r\n      )}\r\n      <ul className=\"top-tracks-list\">\r\n        {topTracks.map((track) => (\r\n          <li key={track.id} className=\"top-tracks-item\">\r\n            {track.album.images.length > 0 && (\r\n              <img\r\n                src={track.album.images[2].url} // Assuming you want to display the album art\r\n                alt={track.name}\r\n                className=\"track-image\"\r\n              />\r\n            )}\r\n            <div className=\"track-info\">\r\n              <p className=\"track-name\">{track.name}</p>\r\n              <p className=\"artists\">{track.artists.map((artist) => artist.name).join(', ')}</p>\r\n              {isTrackInFavorites(track) ? (\r\n                <button\r\n                  onClick={() => handleRemoveFromFavorites(track)}\r\n                  className=\"remove-from-favorites-button\"\r\n                >\r\n                  Remove from Favorites\r\n                </button>\r\n              ) : (\r\n                <button\r\n                  onClick={() => handleAddToFavorites(track)}\r\n                  className=\"add-to-favorites-button\"\r\n                >\r\n                  Add to Favorites\r\n                </button>\r\n              )}\r\n            </div>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nTopTracks.propTypes = {\r\n  user: PropTypes.object.isRequired,\r\n  setFavorites: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default TopTracks;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}