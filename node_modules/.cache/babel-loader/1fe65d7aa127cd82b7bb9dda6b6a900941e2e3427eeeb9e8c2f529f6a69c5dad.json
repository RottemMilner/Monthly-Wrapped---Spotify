{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nmiln\\\\my-app\\\\src\\\\components\\\\Search.js\",\n  _s = $RefreshSig$();\n/*// components/Search.js\r\nimport React, { useState } from 'react';\r\nimport spotifyApi from '../spotifyAuth';\r\n\r\nfunction Search() {\r\n  const [query, setQuery] = useState('');\r\n  const [searchResults, setSearchResults] = useState(null);\r\n\r\n  const handleSearch = async () => {\r\n    try {\r\n      // Use the Spotify Web API to search for tracks, artists, albums, and playlists\r\n      const response = await spotifyApi.search(query, ['track', 'artist', 'album', 'playlist'], { limit: 10 });\r\n\r\n      // Update state with the search results\r\n      setSearchResults(response);\r\n    } catch (error) {\r\n      console.error('Error performing search:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Search</h2>\r\n      <div>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Enter search query\"\r\n          value={query}\r\n          onChange={(e) => setQuery(e.target.value)}\r\n        />\r\n        <button onClick={handleSearch}>Search</button>\r\n      </div>\r\n      {searchResults && (\r\n        <div>\r\n          <h3>Search Results</h3>\r\n          <ul className=\"top-artists-list\">\r\n            {searchResults.tracks?.items.map((item) => (\r\n              <li key={item.id} className=\"top-artists-item\">\r\n                <img\r\n              src={item.album.images[2].url}\r\n              alt={item.name}\r\n              className=\"album-art\"\r\n            />\r\n            <div className=\"track-info\">\r\n              <p className=\"track-name\">{item.name}</p>\r\n              <p className=\"artists\">\r\n                {item.artists.map((artist) => artist.name).join(', ')}\r\n              </p>\r\n              </div>\r\n              </li>\r\n            ))}\r\n            {searchResults.artists?.items.map((item) => (\r\n              <li key={item.id} className=\"top-artists-item\">\r\n                {item.images.length > 0 && (\r\n                <img\r\n                    src={item.images[2].url} \r\n                    alt={item.name}\r\n                    className=\"artist-image\"\r\n                />\r\n                )}\r\n                <div className=\"artist-info\">\r\n                <p className=\"artist-name\">{item.name}</p>\r\n                </div>\r\n                </li>\r\n            ))}\r\n            {searchResults.albums?.items.map((item) => (\r\n              <li key={item.id} className=\"top-artists-item\">{item.name} - Album</li>\r\n            ))}\r\n            {searchResults.playlists?.items.map((item) => (\r\n              <li key={item.id} className=\"top-artists-item\">{item.name} - Playlist</li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Search;*/\n\n// components/Search.js\nimport React, { useState } from 'react';\nimport spotifyApi from '../spotifyAuth';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Search() {\n  _s();\n  const [query, setQuery] = useState('');\n  const [searchType, setSearchType] = useState('track'); // Default to searching for tracks\n  const [searchResults, setSearchResults] = useState(null);\n  const handleSearch = async () => {\n    try {\n      // Use the Spotify Web API to search based on the selected type\n      const response = await spotifyApi.search(query, [searchType], {\n        limit: 10\n      });\n      console.log(response);\n      console.log(searchType);\n      console.log(response[searchType]['items']);\n\n      // Extract and update state with the top results\n      if (response[searchType] && response[searchType]['items']) {\n        setSearchResults(response[searchType]['items']);\n      } else {\n        setSearchResults([]);\n        console.log('hi');\n      }\n      console.log(searchResults);\n    } catch (error) {\n      console.error('Error performing search:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Search\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        value: searchType,\n        onChange: e => setSearchType(e.target.value),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"track\",\n          children: \"Track\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"artists\",\n          children: \"Artists\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"album\",\n          children: \"Album\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"playlist\",\n          children: \"Playlist\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: `Enter ${searchType} name`,\n        value: query,\n        onChange: e => setQuery(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSearch,\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), searchResults && searchResults.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Top Results\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: searchResults.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: item.name\n        }, item.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n}\n_s(Search, \"QX24W/6LBJ6phSoIhRhA3H8CKvU=\");\n_c = Search;\nexport default Search;\nvar _c;\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"names":["React","useState","spotifyApi","jsxDEV","_jsxDEV","Search","_s","query","setQuery","searchType","setSearchType","searchResults","setSearchResults","handleSearch","response","search","limit","console","log","error","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","type","placeholder","onClick","length","map","item","name","id","_c","$RefreshReg$"],"sources":["C:/Users/nmiln/my-app/src/components/Search.js"],"sourcesContent":["/*// components/Search.js\r\nimport React, { useState } from 'react';\r\nimport spotifyApi from '../spotifyAuth';\r\n\r\nfunction Search() {\r\n  const [query, setQuery] = useState('');\r\n  const [searchResults, setSearchResults] = useState(null);\r\n\r\n  const handleSearch = async () => {\r\n    try {\r\n      // Use the Spotify Web API to search for tracks, artists, albums, and playlists\r\n      const response = await spotifyApi.search(query, ['track', 'artist', 'album', 'playlist'], { limit: 10 });\r\n\r\n      // Update state with the search results\r\n      setSearchResults(response);\r\n    } catch (error) {\r\n      console.error('Error performing search:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Search</h2>\r\n      <div>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Enter search query\"\r\n          value={query}\r\n          onChange={(e) => setQuery(e.target.value)}\r\n        />\r\n        <button onClick={handleSearch}>Search</button>\r\n      </div>\r\n      {searchResults && (\r\n        <div>\r\n          <h3>Search Results</h3>\r\n          <ul className=\"top-artists-list\">\r\n            {searchResults.tracks?.items.map((item) => (\r\n              <li key={item.id} className=\"top-artists-item\">\r\n                <img\r\n              src={item.album.images[2].url}\r\n              alt={item.name}\r\n              className=\"album-art\"\r\n            />\r\n            <div className=\"track-info\">\r\n              <p className=\"track-name\">{item.name}</p>\r\n              <p className=\"artists\">\r\n                {item.artists.map((artist) => artist.name).join(', ')}\r\n              </p>\r\n              </div>\r\n              </li>\r\n            ))}\r\n            {searchResults.artists?.items.map((item) => (\r\n              <li key={item.id} className=\"top-artists-item\">\r\n                {item.images.length > 0 && (\r\n                <img\r\n                    src={item.images[2].url} \r\n                    alt={item.name}\r\n                    className=\"artist-image\"\r\n                />\r\n                )}\r\n                <div className=\"artist-info\">\r\n                <p className=\"artist-name\">{item.name}</p>\r\n                </div>\r\n                </li>\r\n            ))}\r\n            {searchResults.albums?.items.map((item) => (\r\n              <li key={item.id} className=\"top-artists-item\">{item.name} - Album</li>\r\n            ))}\r\n            {searchResults.playlists?.items.map((item) => (\r\n              <li key={item.id} className=\"top-artists-item\">{item.name} - Playlist</li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Search;*/\r\n\r\n// components/Search.js\r\nimport React, { useState } from 'react';\r\nimport spotifyApi from '../spotifyAuth';\r\n\r\nfunction Search() {\r\n  const [query, setQuery] = useState('');\r\n  const [searchType, setSearchType] = useState('track'); // Default to searching for tracks\r\n  const [searchResults, setSearchResults] = useState(null);\r\n\r\n  const handleSearch = async () => {\r\n    try {\r\n      // Use the Spotify Web API to search based on the selected type\r\n      const response = await spotifyApi.search(query, [searchType], { limit: 10 });\r\n      console.log(response);\r\n      console.log(searchType);\r\n      console.log(response[searchType]['items']);\r\n\r\n      // Extract and update state with the top results\r\n      if (response[searchType] && response[searchType]['items']) {\r\n        setSearchResults(response[searchType]['items']);\r\n      } else {\r\n        setSearchResults([]);\r\n        console.log('hi');\r\n      }\r\n      console.log(searchResults);\r\n    } catch (error) {\r\n      console.error('Error performing search:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Search</h2>\r\n      <div>\r\n        <select value={searchType} onChange={(e) => setSearchType(e.target.value)}>\r\n          <option value=\"track\">Track</option>\r\n          <option value=\"artists\">Artists</option>\r\n          <option value=\"album\">Album</option>\r\n          <option value=\"playlist\">Playlist</option>\r\n        </select>\r\n        <input\r\n          type=\"text\"\r\n          placeholder={`Enter ${searchType} name`}\r\n          value={query}\r\n          onChange={(e) => setQuery(e.target.value)}\r\n        />\r\n        <button onClick={handleSearch}>Search</button>\r\n      </div>\r\n      {searchResults && searchResults.length > 0 && (\r\n        <div>\r\n          <h3>Top Results</h3>\r\n          <ul>\r\n            {searchResults.map((item) => (\r\n              <li key={item.id}>{item.name}</li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Search;\r\n\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}