{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nmiln\\\\my-app\\\\src\\\\components\\\\TopTracks.js\",\n  _s = $RefreshSig$();\n// components/TopTracks/TopTracks.js\n\nimport React, { useState, useEffect } from 'react';\nimport spotifyApi from '../spotifyAuth';\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TopTracks({\n  user,\n  setFavorites\n}) {\n  _s();\n  const [topTracks, setTopTracks] = useState([]);\n  const [favorites, setFavoritesState] = useState([]);\n  const [showHeadline, setShowHeadline] = useState(false);\n  const [newPlaylistId, setNewPlaylistId] = useState(null);\n  useEffect(() => {\n    // Load favorites from localStorage on component mount\n    const storedFavorites = JSON.parse(localStorage.getItem('favorites')) || [];\n    setFavoritesState(storedFavorites);\n    setFavorites(storedFavorites);\n\n    // Fetch the user's top tracks\n    spotifyApi.getMyTopTracks({\n      limit: 50,\n      time_range: 'short_term'\n    }).then(response => {\n      setTopTracks(response.items);\n      setShowHeadline(true); // Set to true after fetching data\n    });\n  }, [user, setFavorites]);\n  const isTrackInFavorites = track => {\n    return favorites && favorites.some(fav => fav.id === track.id);\n  };\n  const handleAddToFavorites = track => {\n    setFavoritesState(prevFavorites => {\n      const newFavorites = Array.isArray(prevFavorites) ? [...prevFavorites] : [];\n      newFavorites.push(track);\n      localStorage.setItem('favorites', JSON.stringify(newFavorites)); // Save to localStorage\n      return newFavorites;\n    });\n    setFavorites(prevFavorites => {\n      const newFavorites = Array.isArray(prevFavorites) ? [...prevFavorites] : [];\n      newFavorites.push(track);\n      return newFavorites;\n    });\n  };\n  const handleRemoveFromFavorites = track => {\n    setFavoritesState(prevFavorites => {\n      const newFavorites = Array.isArray(prevFavorites) ? prevFavorites.filter(fav => fav.id !== track.id) : [];\n      localStorage.setItem('favorites', JSON.stringify(newFavorites)); // Save to localStorage\n      return newFavorites;\n    });\n    setFavorites(prevFavorites => {\n      return Array.isArray(prevFavorites) ? prevFavorites.filter(fav => fav.id !== track.id) : [];\n    });\n  };\n  const getCurrentMonthAndYear = () => {\n    const currentDate = new Date();\n    const monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n    const currentMonth = monthNames[currentDate.getMonth()];\n    const currentYear = currentDate.getFullYear();\n    return `${currentMonth} ${currentYear}`;\n  };\n  const createPlaylist = async () => {\n    // Implement logic to create a playlist with top tracks\n    // Use the user.id, topTracks, and Spotify API\n    // Example:\n    const playlistName = `Top Tracks of ${getCurrentMonthAndYear()}`;\n    spotifyApi.createPlaylist(user.id, {\n      name: playlistName,\n      public: false,\n      // Set to true if you want the playlist to be public\n      description: 'A playlist of your top tracks in ${getCurrentMonthAndYear()}'\n    }).then(playlist => {\n      const trackUris = topTracks.map(track => track.uri);\n      spotifyApi.addTracksToPlaylist(playlist.id, trackUris).then(() => {\n        // Playlist created successfully\n        console.log('Playlist created successfully!');\n      });\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [showHeadline && /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Top Tracks\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: createPlaylist,\n      className: \"add-to-favorites-button\",\n      children: \"Create Playlist\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"top-tracks-list\",\n      children: topTracks.map(track => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"top-tracks-item\",\n        children: [track.album.images.length > 0 && /*#__PURE__*/_jsxDEV(\"img\", {\n          src: track.album.images[2].url // Assuming you want to display the album art\n          ,\n          alt: track.name,\n          className: \"track-image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"track-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"track-name\",\n            children: track.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"artists\",\n            children: track.artists.map(artist => artist.name).join(', ')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 15\n          }, this), isTrackInFavorites(track) ? /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleRemoveFromFavorites(track),\n            className: \"remove-from-favorites-button\",\n            children: \"Remove from Favorites\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleAddToFavorites(track),\n            className: \"add-to-favorites-button\",\n            children: \"Add to Favorites\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }, this)]\n      }, track.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n}\n_s(TopTracks, \"zyTWGkj1KfEGCHPHiQi3aY6YzsE=\");\n_c = TopTracks;\nTopTracks.propTypes = {\n  setFavorites: PropTypes.func.isRequired\n};\nexport default TopTracks;\nvar _c;\n$RefreshReg$(_c, \"TopTracks\");","map":{"version":3,"names":["React","useState","useEffect","spotifyApi","PropTypes","jsxDEV","_jsxDEV","TopTracks","user","setFavorites","_s","topTracks","setTopTracks","favorites","setFavoritesState","showHeadline","setShowHeadline","newPlaylistId","setNewPlaylistId","storedFavorites","JSON","parse","localStorage","getItem","getMyTopTracks","limit","time_range","then","response","items","isTrackInFavorites","track","some","fav","id","handleAddToFavorites","prevFavorites","newFavorites","Array","isArray","push","setItem","stringify","handleRemoveFromFavorites","filter","getCurrentMonthAndYear","currentDate","Date","monthNames","currentMonth","getMonth","currentYear","getFullYear","createPlaylist","playlistName","name","public","description","playlist","trackUris","map","uri","addTracksToPlaylist","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","className","album","images","length","src","url","alt","artists","artist","join","_c","propTypes","func","isRequired","$RefreshReg$"],"sources":["C:/Users/nmiln/my-app/src/components/TopTracks.js"],"sourcesContent":["// components/TopTracks/TopTracks.js\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport spotifyApi from '../spotifyAuth';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction TopTracks({ user, setFavorites }) {\r\n  const [topTracks, setTopTracks] = useState([]);\r\n  const [favorites, setFavoritesState] = useState([]);\r\n  const [showHeadline, setShowHeadline] = useState(false);\r\n\r\n  const [newPlaylistId, setNewPlaylistId] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Load favorites from localStorage on component mount\r\n    const storedFavorites = JSON.parse(localStorage.getItem('favorites')) || [];\r\n    setFavoritesState(storedFavorites);\r\n    setFavorites(storedFavorites);\r\n\r\n    // Fetch the user's top tracks\r\n    spotifyApi.getMyTopTracks({ limit: 50, time_range: 'short_term' }).then((response) => {\r\n      setTopTracks(response.items);\r\n      setShowHeadline(true); // Set to true after fetching data\r\n    });\r\n  }, [user, setFavorites]);\r\n\r\n  const isTrackInFavorites = (track) => {\r\n    return favorites && favorites.some((fav) => fav.id === track.id);\r\n  };\r\n\r\n  const handleAddToFavorites = (track) => {\r\n    setFavoritesState((prevFavorites) => {\r\n      const newFavorites = Array.isArray(prevFavorites) ? [...prevFavorites] : [];\r\n      newFavorites.push(track);\r\n      localStorage.setItem('favorites', JSON.stringify(newFavorites)); // Save to localStorage\r\n      return newFavorites;\r\n    });\r\n\r\n    setFavorites((prevFavorites) => {\r\n      const newFavorites = Array.isArray(prevFavorites) ? [...prevFavorites] : [];\r\n      newFavorites.push(track);\r\n      return newFavorites;\r\n    });\r\n  };\r\n\r\n  const handleRemoveFromFavorites = (track) => {\r\n    setFavoritesState((prevFavorites) => {\r\n      const newFavorites = Array.isArray(prevFavorites)\r\n        ? prevFavorites.filter((fav) => fav.id !== track.id)\r\n        : [];\r\n      localStorage.setItem('favorites', JSON.stringify(newFavorites)); // Save to localStorage\r\n      return newFavorites;\r\n    });\r\n\r\n    setFavorites((prevFavorites) => {\r\n      return Array.isArray(prevFavorites)\r\n        ? prevFavorites.filter((fav) => fav.id !== track.id)\r\n        : [];\r\n    });\r\n  };\r\n\r\n  const getCurrentMonthAndYear = () => {\r\n    const currentDate = new Date();\r\n    const monthNames = [\r\n      'January', 'February', 'March', 'April', 'May', 'June',\r\n      'July', 'August', 'September', 'October', 'November', 'December'\r\n    ];\r\n\r\n    const currentMonth = monthNames[currentDate.getMonth()];\r\n    const currentYear = currentDate.getFullYear();\r\n\r\n    return `${currentMonth} ${currentYear}`;\r\n  };\r\n\r\n  const createPlaylist = async () => {\r\n    // Implement logic to create a playlist with top tracks\r\n    // Use the user.id, topTracks, and Spotify API\r\n    // Example:\r\n    const playlistName = `Top Tracks of ${getCurrentMonthAndYear()}`;\r\n    spotifyApi.createPlaylist(user.id, {\r\n      name: playlistName,\r\n      public: false, // Set to true if you want the playlist to be public\r\n      description: 'A playlist of your top tracks in ${getCurrentMonthAndYear()}',\r\n    }).then((playlist) => {\r\n      const trackUris = topTracks.map((track) => track.uri);\r\n      spotifyApi.addTracksToPlaylist(playlist.id, trackUris).then(() => {\r\n        // Playlist created successfully\r\n        console.log('Playlist created successfully!');\r\n      });\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {showHeadline && <h2>Top Tracks</h2>}\r\n      <button onClick={createPlaylist} className=\"add-to-favorites-button\">Create Playlist</button>\r\n      <ul className=\"top-tracks-list\">\r\n        {topTracks.map((track) => (\r\n          <li key={track.id} className=\"top-tracks-item\">\r\n            {track.album.images.length > 0 && (\r\n              <img\r\n                src={track.album.images[2].url} // Assuming you want to display the album art\r\n                alt={track.name}\r\n                className=\"track-image\"\r\n              />\r\n            )}\r\n            <div className=\"track-info\">\r\n              <p className=\"track-name\">{track.name}</p>\r\n              <p className=\"artists\">{track.artists.map((artist) => artist.name).join(', ')}</p>\r\n              {isTrackInFavorites(track) ? (\r\n                <button\r\n                  onClick={() => handleRemoveFromFavorites(track)}\r\n                  className=\"remove-from-favorites-button\"\r\n                >\r\n                  Remove from Favorites\r\n                </button>\r\n              ) : (\r\n                <button\r\n                  onClick={() => handleAddToFavorites(track)}\r\n                  className=\"add-to-favorites-button\"\r\n                >\r\n                  Add to Favorites\r\n                </button>\r\n              )}\r\n            </div>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nTopTracks.propTypes = {\r\n  setFavorites: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default TopTracks;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}