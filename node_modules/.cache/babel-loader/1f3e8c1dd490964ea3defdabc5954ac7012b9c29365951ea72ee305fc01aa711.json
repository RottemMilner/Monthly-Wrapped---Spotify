{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nmiln\\\\my-app\\\\src\\\\components\\\\TopGenresButton.js\",\n  _s = $RefreshSig$();\n// components/TopGenresButton.js\n\nimport React, { useState, useEffect } from 'react';\nimport spotifyApi from '../spotifyAuth';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TopGenresButton() {\n  _s();\n  const [topGenres, setTopGenres] = useState([]);\n  const getTopGenres = async () => {\n    try {\n      // Fetch the user's top tracks for the past month\n      const response = await spotifyApi.getMyTopTracks({\n        limit: 50,\n        time_range: 'short_term'\n      });\n\n      // Ensure that the response and its items property are defined\n      if (response && response.items) {\n        // Extract genres from the tracks\n        const genres = response.items.reduce((acc, track) => {\n          // Ensure that track, artists, and genres properties are defined\n          if (track.artists && track.artists.length > 0) {\n            track.artists.forEach(artist => {\n              if (artist.genres && artist.genres.length > 0) {\n                artist.genres.forEach(genre => {\n                  acc.push(genre);\n                });\n              }\n            });\n          }\n          return acc;\n        }, []);\n\n        // Count occurrences of each genre\n        const genreCounts = genres.reduce((acc, genre) => {\n          acc[genre] = (acc[genre] || 0) + 1;\n          return acc;\n        }, {});\n\n        // Sort genres by occurrence in descending order\n        const sortedGenres = Object.keys(genreCounts).sort((a, b) => genreCounts[b] - genreCounts[a]);\n\n        // Select the top 5 genres\n        const top5Genres = sortedGenres.slice(0, 5);\n        setTopGenres(top5Genres);\n      }\n    } catch (error) {\n      console.error('Error fetching top genres:', error);\n    }\n  };\n  useEffect(() => {\n    getTopGenres();\n  }, []); // Run once on component mount\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Top Genres This Month\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: topGenres.map((genre, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: genre\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n}\n_s(TopGenresButton, \"w2kKxolC7jguuU15+ZWuYzWL+SA=\");\n_c = TopGenresButton;\nexport default TopGenresButton;\nvar _c;\n$RefreshReg$(_c, \"TopGenresButton\");","map":{"version":3,"names":["React","useState","useEffect","spotifyApi","jsxDEV","_jsxDEV","TopGenresButton","_s","topGenres","setTopGenres","getTopGenres","response","getMyTopTracks","limit","time_range","items","genres","reduce","acc","track","artists","length","forEach","artist","genre","push","genreCounts","sortedGenres","Object","keys","sort","a","b","top5Genres","slice","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","_c","$RefreshReg$"],"sources":["C:/Users/nmiln/my-app/src/components/TopGenresButton.js"],"sourcesContent":["// components/TopGenresButton.js\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport spotifyApi from '../spotifyAuth';\r\n\r\nfunction TopGenresButton() {\r\n  const [topGenres, setTopGenres] = useState([]);\r\n\r\n  const getTopGenres = async () => {\r\n    try {\r\n      // Fetch the user's top tracks for the past month\r\n      const response = await spotifyApi.getMyTopTracks({ limit: 50, time_range: 'short_term' });\r\n\r\n    // Ensure that the response and its items property are defined\r\n    if (response && response.items) {\r\n      // Extract genres from the tracks\r\n      const genres = response.items.reduce((acc, track) => {\r\n        // Ensure that track, artists, and genres properties are defined\r\n        if (track.artists && track.artists.length > 0) {\r\n          track.artists.forEach((artist) => {\r\n            if (artist.genres && artist.genres.length > 0) {\r\n              artist.genres.forEach((genre) => {\r\n                acc.push(genre);\r\n              });\r\n            }\r\n          });\r\n        }\r\n        return acc;\r\n      }, []);\r\n\r\n      // Count occurrences of each genre\r\n      const genreCounts = genres.reduce((acc, genre) => {\r\n        acc[genre] = (acc[genre] || 0) + 1;\r\n        return acc;\r\n      }, {});\r\n\r\n      // Sort genres by occurrence in descending order\r\n      const sortedGenres = Object.keys(genreCounts).sort((a, b) => genreCounts[b] - genreCounts[a]);\r\n\r\n      // Select the top 5 genres\r\n      const top5Genres = sortedGenres.slice(0, 5);\r\n\r\n      setTopGenres(top5Genres);\r\n    }\r\n    } catch (error) {\r\n      console.error('Error fetching top genres:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getTopGenres();\r\n  }, []); // Run once on component mount\r\n\r\n  return (\r\n    <div>\r\n      <h2>Top Genres This Month</h2>\r\n      <ul>\r\n        {topGenres.map((genre, index) => (\r\n          <li key={index}>{genre}</li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );  \r\n}\r\n\r\nexport default TopGenresButton;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}