{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nmiln\\\\my-app\\\\src\\\\components\\\\CurrentlyPlaying.js\",\n  _s = $RefreshSig$();\n// CurrentlyPlaying.js\n\nimport React, { useState, useEffect } from 'react';\nimport spotifyApi from '../spotifyAuth';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CurrentlyPlaying({\n  setFavorites\n}) {\n  _s();\n  const [currentTrack, setCurrentTrack] = useState(null);\n  useEffect(() => {\n    // Fetch the user's currently playing track\n    spotifyApi.getMyCurrentPlayingTrack().then(response => {\n      setCurrentTrack(response.item);\n    });\n  }, []);\n  const handleAddToFavorites = track => {\n    // Check if the track already exists in favorites\n    const isAlreadyInFavorites = favorites.some(fav => fav.id === track.id);\n\n    // If not, add it to favorites\n    if (!isAlreadyInFavorites) {\n      setFavorites(prevFavorites => [...prevFavorites, track]);\n    } else {\n      // Optionally, you can provide feedback to the user that the song is already in favorites\n      alert(\"This song is already in your favorites!\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Currently Playing\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), currentTrack && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: currentTrack.album.images[0].url,\n        alt: currentTrack.name,\n        className: \"album-art-currently\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"track-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"track-name\",\n          children: currentTrack.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"artists\",\n          children: currentTrack.artists.map(artist => artist.name).join(', ')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleAddToFavorites(currentTrack),\n          className: \"add-to-favorites-button\",\n          children: \"Add to Favorites\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this), !currentTrack && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No track currently playing\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 25\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n_s(CurrentlyPlaying, \"HHi/6zj8nxa3WTxfIvOeEMmOqbc=\");\n_c = CurrentlyPlaying;\nexport default CurrentlyPlaying;\nvar _c;\n$RefreshReg$(_c, \"CurrentlyPlaying\");","map":{"version":3,"names":["React","useState","useEffect","spotifyApi","jsxDEV","_jsxDEV","CurrentlyPlaying","setFavorites","_s","currentTrack","setCurrentTrack","getMyCurrentPlayingTrack","then","response","item","handleAddToFavorites","track","isAlreadyInFavorites","favorites","some","fav","id","prevFavorites","alert","children","fileName","_jsxFileName","lineNumber","columnNumber","src","album","images","url","alt","name","className","artists","map","artist","join","onClick","_c","$RefreshReg$"],"sources":["C:/Users/nmiln/my-app/src/components/CurrentlyPlaying.js"],"sourcesContent":["// CurrentlyPlaying.js\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport spotifyApi from '../spotifyAuth';\r\n\r\nfunction CurrentlyPlaying({setFavorites}) {\r\n  const [currentTrack, setCurrentTrack] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Fetch the user's currently playing track\r\n    spotifyApi.getMyCurrentPlayingTrack().then((response) => {\r\n      setCurrentTrack(response.item);\r\n    });\r\n  }, []);\r\n\r\n  const handleAddToFavorites = (track) => {\r\n    // Check if the track already exists in favorites\r\n    const isAlreadyInFavorites = favorites.some((fav) => fav.id === track.id);\r\n  \r\n    // If not, add it to favorites\r\n    if (!isAlreadyInFavorites) {\r\n      setFavorites((prevFavorites) => [...prevFavorites, track]);\r\n    } else {\r\n      // Optionally, you can provide feedback to the user that the song is already in favorites\r\n      alert(\"This song is already in your favorites!\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Currently Playing</h2>\r\n      {currentTrack && (\r\n        <div>\r\n          <img\r\n            src={currentTrack.album.images[0].url}\r\n            alt={currentTrack.name}\r\n            className=\"album-art-currently\"\r\n          />\r\n          <div className=\"track-info\">\r\n            <p className=\"track-name\">{currentTrack.name}</p>\r\n            <p className=\"artists\">{currentTrack.artists.map((artist) => artist.name).join(', ')}</p>\r\n            <button onClick={() => handleAddToFavorites(currentTrack)} className=\"add-to-favorites-button\">Add to Favorites</button>\r\n          </div>\r\n        </div>\r\n      )}\r\n      {!currentTrack && <p>No track currently playing</p>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CurrentlyPlaying;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}