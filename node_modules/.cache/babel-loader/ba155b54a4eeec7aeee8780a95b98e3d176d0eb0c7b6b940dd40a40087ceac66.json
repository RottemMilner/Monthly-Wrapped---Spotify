{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nmiln\\\\my-app\\\\src\\\\components\\\\TopGenresButton.js\",\n  _s = $RefreshSig$();\n/*// components/TopGenresButton.js\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport spotifyApi from '../spotifyAuth';\r\n\r\nfunction TopGenresButton() {\r\n  const [topGenres, setTopGenres] = useState([]);\r\n\r\n  const getTopGenres = async () => {\r\n    try {\r\n      const response = await spotifyApi.getMyTopArtists({ limit: 50, time_range: 'short_term' });\r\n\r\n    // Ensure that the response and its items property are defined\r\n    if (response && response.items) {\r\n      const genres = [];\r\n      \r\n      for (let i = 0; i < response.items.length; i++) {\r\n        const artist = response.items[i];\r\n        if (artist.genres && artist.genres.length > 0) {\r\n            for (let k = 0; k < artist.genres.length; k++) {\r\n                const genre = artist.genres[k];\r\n                genres.push(genre);\r\n              }\r\n            }\r\n        }\r\n    \r\n      \r\n\r\n      // Count occurrences of each genre\r\n      const genreCounts = genres.reduce((acc, genre) => {\r\n        acc[genre] = (acc[genre] || 0) + 1;\r\n        return acc;\r\n      }, {});\r\n\r\n      // Sort genres by occurrence in descending order\r\n      const sortedGenres = Object.keys(genreCounts).sort((a, b) => genreCounts[b] - genreCounts[a]);\r\n\r\n      // Select the top 5 genres\r\n      const top5Genres = sortedGenres.slice(0, 10);\r\n\r\n      setTopGenres(top5Genres);\r\n    }\r\n    } catch (error) {\r\n      console.error('Error fetching top genres:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getTopGenres();\r\n  }, []); // Run once on component mount\r\n\r\n  return (\r\n    <div>\r\n      <h2>Top Genres This Month</h2>\r\n      <ul>\r\n        {topGenres.map((genre, index) => (\r\n          <li key={index}>{genre}</li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );  \r\n}\r\n\r\nexport default TopGenresButton;\r\n*/\n\n// components/TopGenresButton.js\n\nimport React, { useState, useEffect } from 'react';\nimport spotifyApi from '../spotifyAuth';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TopGenresButton() {\n  _s();\n  const [topGenres, setTopGenres] = useState([]);\n  const getTopGenres = async () => {\n    try {\n      const response = await spotifyApi.getMyTopTracks({\n        limit: 50,\n        time_range: 'short_term'\n      });\n\n      // Ensure that the response and its items property are defined\n      if (response && response.items) {\n        // Extract genres from the tracks\n        const genres = [];\n        for (let i = 0; i < response.items.length; i++) {\n          const track = response.items[i];\n\n          // Ensure that track, artists, and genres properties are defined\n          if (track.artists && track.artists.length > 0) {\n            for (let j = 0; j < track.artists.length; j++) {\n              const artist = track.artists[j];\n              console.log(spotifyApi.getArtist(artist.id));\n              if (artist.genres && artist.genres.length > 0) {\n                for (let k = 0; k < artist.genres.length; k++) {\n                  const genre = artist.genres[k];\n                  genres.push(genre);\n                }\n              }\n            }\n          }\n        }\n\n        // Count occurrences of each genre\n        const genreCounts = genres.reduce((acc, genre) => {\n          acc[genre] = (acc[genre] || 0) + 1;\n          return acc;\n        }, {});\n\n        // Sort genres by occurrence in descending order\n        const sortedGenres = Object.keys(genreCounts).sort((a, b) => genreCounts[b] - genreCounts[a]);\n\n        // Select the top 5 genres\n        const top5Genres = sortedGenres.slice(0, 10);\n        setTopGenres(top5Genres);\n      }\n    } catch (error) {\n      console.error('Error fetching top genres:', error);\n    }\n  };\n  useEffect(() => {\n    getTopGenres();\n  }, []); // Run once on component mount\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Top Genres This Month\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: topGenres.map((genre, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: genre\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n}\n_s(TopGenresButton, \"w2kKxolC7jguuU15+ZWuYzWL+SA=\");\n_c = TopGenresButton;\nexport default TopGenresButton;\nvar _c;\n$RefreshReg$(_c, \"TopGenresButton\");","map":{"version":3,"names":["React","useState","useEffect","spotifyApi","jsxDEV","_jsxDEV","TopGenresButton","_s","topGenres","setTopGenres","getTopGenres","response","getMyTopTracks","limit","time_range","items","genres","i","length","track","artists","j","artist","console","log","getArtist","id","k","genre","push","genreCounts","reduce","acc","sortedGenres","Object","keys","sort","a","b","top5Genres","slice","error","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","_c","$RefreshReg$"],"sources":["C:/Users/nmiln/my-app/src/components/TopGenresButton.js"],"sourcesContent":["/*// components/TopGenresButton.js\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport spotifyApi from '../spotifyAuth';\r\n\r\nfunction TopGenresButton() {\r\n  const [topGenres, setTopGenres] = useState([]);\r\n\r\n  const getTopGenres = async () => {\r\n    try {\r\n      const response = await spotifyApi.getMyTopArtists({ limit: 50, time_range: 'short_term' });\r\n\r\n    // Ensure that the response and its items property are defined\r\n    if (response && response.items) {\r\n      const genres = [];\r\n      \r\n      for (let i = 0; i < response.items.length; i++) {\r\n        const artist = response.items[i];\r\n        if (artist.genres && artist.genres.length > 0) {\r\n            for (let k = 0; k < artist.genres.length; k++) {\r\n                const genre = artist.genres[k];\r\n                genres.push(genre);\r\n              }\r\n            }\r\n        }\r\n    \r\n      \r\n\r\n      // Count occurrences of each genre\r\n      const genreCounts = genres.reduce((acc, genre) => {\r\n        acc[genre] = (acc[genre] || 0) + 1;\r\n        return acc;\r\n      }, {});\r\n\r\n      // Sort genres by occurrence in descending order\r\n      const sortedGenres = Object.keys(genreCounts).sort((a, b) => genreCounts[b] - genreCounts[a]);\r\n\r\n      // Select the top 5 genres\r\n      const top5Genres = sortedGenres.slice(0, 10);\r\n\r\n      setTopGenres(top5Genres);\r\n    }\r\n    } catch (error) {\r\n      console.error('Error fetching top genres:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getTopGenres();\r\n  }, []); // Run once on component mount\r\n\r\n  return (\r\n    <div>\r\n      <h2>Top Genres This Month</h2>\r\n      <ul>\r\n        {topGenres.map((genre, index) => (\r\n          <li key={index}>{genre}</li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );  \r\n}\r\n\r\nexport default TopGenresButton;\r\n*/\r\n\r\n// components/TopGenresButton.js\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport spotifyApi from '../spotifyAuth';\r\n\r\nfunction TopGenresButton() {\r\n  const [topGenres, setTopGenres] = useState([]);\r\n\r\n  const getTopGenres = async () => {\r\n    try {\r\n        const response = await spotifyApi.getMyTopTracks({ limit: 50, time_range: 'short_term' });\r\n\r\n        // Ensure that the response and its items property are defined\r\n        if (response && response.items) {\r\n          // Extract genres from the tracks\r\n          const genres = [];\r\n          \r\n          for (let i = 0; i < response.items.length; i++) {\r\n            const track = response.items[i];\r\n            \r\n            // Ensure that track, artists, and genres properties are defined\r\n            if (track.artists && track.artists.length > 0) {\r\n              for (let j = 0; j < track.artists.length; j++) {\r\n                const artist = track.artists[j];\r\n                console.log(spotifyApi.getArtist(artist.id));\r\n                \r\n                if (artist.genres && artist.genres.length > 0) {\r\n                  for (let k = 0; k < artist.genres.length; k++) {                    \r\n                    const genre = artist.genres[k];\r\n                    genres.push(genre);\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n    \r\n      \r\n\r\n      // Count occurrences of each genre\r\n      const genreCounts = genres.reduce((acc, genre) => {\r\n        acc[genre] = (acc[genre] || 0) + 1;\r\n        return acc;\r\n      }, {});\r\n\r\n      // Sort genres by occurrence in descending order\r\n      const sortedGenres = Object.keys(genreCounts).sort((a, b) => genreCounts[b] - genreCounts[a]);\r\n\r\n      // Select the top 5 genres\r\n      const top5Genres = sortedGenres.slice(0, 10);\r\n\r\n      setTopGenres(top5Genres);\r\n    }\r\n    } catch (error) {\r\n      console.error('Error fetching top genres:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getTopGenres();\r\n  }, []); // Run once on component mount\r\n\r\n  return (\r\n    <div>\r\n      <h2>Top Genres This Month</h2>\r\n      <ul>\r\n        {topGenres.map((genre, index) => (\r\n          <li key={index}>{genre}</li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );  \r\n}\r\n\r\nexport default TopGenresButton;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}