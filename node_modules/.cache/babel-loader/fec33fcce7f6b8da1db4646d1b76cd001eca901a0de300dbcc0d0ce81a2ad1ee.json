{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nmiln\\\\OneDrive\\\\Desktop\\\\my-app\\\\src\\\\components\\\\RecentlyPlayed.js\",\n  _s = $RefreshSig$();\n// components/RecentlyPlayed.js\n\nimport React, { useState, useEffect } from 'react';\nimport spotifyApi from '../spotifyAuth';\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction RecentlyPlayed({\n  setFavorites\n}) {\n  _s();\n  const [recentlyPlayed, setRecentlyPlayed] = useState([]);\n  const [favorites, setFavoritesState] = useState([]);\n  const [showHeadline, setShowHeadline] = useState(false);\n  useEffect(() => {\n    // Load favorites from localStorage on component mount\n    const storedFavorites = JSON.parse(localStorage.getItem('favorites')) || [];\n    setFavoritesState(storedFavorites);\n    setFavorites(storedFavorites);\n\n    // Fetch the user's recently played tracks\n    spotifyApi.getMyRecentlyPlayedTracks({\n      limit: 50\n    }).then(response => {\n      setRecentlyPlayed(response.items);\n      setShowHeadline(true); // Set to true after fetching data\n    });\n  }, [setFavorites]);\n  const isTrackInFavorites = track => {\n    return track && track.track && track.track.id && favorites && Array.isArray(favorites) && favorites.some(fav => fav && fav.id === track.track.id);\n  };\n  const handleAddToFavorites = track => {\n    setFavoritesState(prevFavorites => {\n      const newFavorites = Array.isArray(prevFavorites) ? [...prevFavorites] : [];\n      newFavorites.push(track.track);\n      localStorage.setItem('favorites', JSON.stringify(newFavorites)); // Save to localStorage\n      return newFavorites;\n    });\n    setFavorites(prevFavorites => {\n      const newFavorites = Array.isArray(prevFavorites) ? [...prevFavorites] : [];\n      newFavorites.push(track.track);\n      return newFavorites;\n    });\n  };\n  const handleRemoveFromFavorites = track => {\n    if (track && track.track && track.track.id) {\n      setFavoritesState(prevFavorites => {\n        const newFavorites = Array.isArray(prevFavorites) ? prevFavorites.filter(fav => fav && fav.id !== track.track.id) : [];\n        localStorage.setItem('favorites', JSON.stringify(newFavorites)); // Save to localStorage\n        return newFavorites;\n      });\n      setFavorites(prevFavorites => {\n        return Array.isArray(prevFavorites) ? prevFavorites.filter(fav => fav && fav.id !== track.track.id) : [];\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [showHeadline && /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Recently Played\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"recently-played-list\",\n      children: recentlyPlayed.map(track => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"recently-played-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: track.track.album.images[0].url,\n          alt: track.track.name,\n          className: \"album-art\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"track-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"track-name\",\n            children: track.track.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"artists\",\n            children: track.track.artists.map(artist => artist.name).join(', ')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 15\n          }, this), isTrackInFavorites(track) ? /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleRemoveFromFavorites(track),\n            className: \"remove-from-favorites-button\",\n            children: \"Remove from Favorites\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleAddToFavorites(track),\n            className: \"add-to-favorites-button\",\n            children: \"Add to Favorites\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this)]\n      }, track.track.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}\n_s(RecentlyPlayed, \"MsCN7q8BcmcmvFLQJ5gnjffE+BU=\");\n_c = RecentlyPlayed;\nRecentlyPlayed.propTypes = {\n  setFavorites: PropTypes.func.isRequired\n};\nexport default RecentlyPlayed;\nvar _c;\n$RefreshReg$(_c, \"RecentlyPlayed\");","map":{"version":3,"names":["React","useState","useEffect","spotifyApi","PropTypes","jsxDEV","_jsxDEV","RecentlyPlayed","setFavorites","_s","recentlyPlayed","setRecentlyPlayed","favorites","setFavoritesState","showHeadline","setShowHeadline","storedFavorites","JSON","parse","localStorage","getItem","getMyRecentlyPlayedTracks","limit","then","response","items","isTrackInFavorites","track","id","Array","isArray","some","fav","handleAddToFavorites","prevFavorites","newFavorites","push","setItem","stringify","handleRemoveFromFavorites","filter","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","src","album","images","url","alt","name","artists","artist","join","onClick","_c","propTypes","func","isRequired","$RefreshReg$"],"sources":["C:/Users/nmiln/OneDrive/Desktop/my-app/src/components/RecentlyPlayed.js"],"sourcesContent":["// components/RecentlyPlayed.js\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport spotifyApi from '../spotifyAuth';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction RecentlyPlayed({ setFavorites }) {\r\n  const [recentlyPlayed, setRecentlyPlayed] = useState([]);\r\n  const [favorites, setFavoritesState] = useState([]);\r\n  const [showHeadline, setShowHeadline] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // Load favorites from localStorage on component mount\r\n    const storedFavorites = JSON.parse(localStorage.getItem('favorites')) || [];\r\n    setFavoritesState(storedFavorites);\r\n    setFavorites(storedFavorites);\r\n\r\n    // Fetch the user's recently played tracks\r\n    spotifyApi.getMyRecentlyPlayedTracks({ limit: 50 }).then((response) => {\r\n      setRecentlyPlayed(response.items);\r\n      setShowHeadline(true); // Set to true after fetching data\r\n    });\r\n  }, [setFavorites]);\r\n\r\n  const isTrackInFavorites = (track) => {\r\n    return (\r\n      track &&\r\n      track.track &&\r\n      track.track.id &&\r\n      favorites &&\r\n      Array.isArray(favorites) &&\r\n      favorites.some((fav) => fav && fav.id === track.track.id)\r\n    );\r\n  };  \r\n\r\n  const handleAddToFavorites = (track) => {\r\n    setFavoritesState((prevFavorites) => {\r\n      const newFavorites = Array.isArray(prevFavorites) ? [...prevFavorites] : [];\r\n      newFavorites.push(track.track);\r\n      localStorage.setItem('favorites', JSON.stringify(newFavorites)); // Save to localStorage\r\n      return newFavorites;\r\n    });\r\n\r\n    setFavorites((prevFavorites) => {\r\n      const newFavorites = Array.isArray(prevFavorites) ? [...prevFavorites] : [];\r\n      newFavorites.push(track.track);\r\n      return newFavorites;\r\n    });\r\n  };\r\n\r\n  const handleRemoveFromFavorites = (track) => {\r\n    if (track && track.track && track.track.id) {\r\n      setFavoritesState((prevFavorites) => {\r\n        const newFavorites = Array.isArray(prevFavorites)\r\n          ? prevFavorites.filter((fav) => fav && fav.id !== track.track.id)\r\n          : [];\r\n        localStorage.setItem('favorites', JSON.stringify(newFavorites)); // Save to localStorage\r\n        return newFavorites;\r\n      });\r\n  \r\n      setFavorites((prevFavorites) => {\r\n        return Array.isArray(prevFavorites)\r\n          ? prevFavorites.filter((fav) => fav && fav.id !== track.track.id)\r\n          : [];\r\n      });\r\n    }\r\n  };\r\n  \r\n\r\n  return (\r\n    <div>\r\n      {showHeadline && <h2>Recently Played</h2>}\r\n      <ul className=\"recently-played-list\">\r\n        {recentlyPlayed.map((track) => (\r\n          <li key={track.track.id} className=\"recently-played-item\">\r\n            <img\r\n              src={track.track.album.images[0].url}\r\n              alt={track.track.name}\r\n              className=\"album-art\"\r\n            />\r\n            <div className=\"track-info\">\r\n              <p className=\"track-name\">{track.track.name}</p>\r\n              <p className=\"artists\">\r\n                {track.track.artists.map((artist) => artist.name).join(', ')}\r\n              </p>\r\n              {isTrackInFavorites(track) ? (\r\n                <button\r\n                  onClick={() => handleRemoveFromFavorites(track)}\r\n                  className=\"remove-from-favorites-button\"\r\n                >\r\n                  Remove from Favorites\r\n                </button>\r\n              ) : (\r\n                <button\r\n                  onClick={() => handleAddToFavorites(track)}\r\n                  className=\"add-to-favorites-button\"\r\n                >\r\n                  Add to Favorites\r\n                </button>\r\n              )}\r\n            </div>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nRecentlyPlayed.propTypes = {\r\n  setFavorites: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default RecentlyPlayed;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}