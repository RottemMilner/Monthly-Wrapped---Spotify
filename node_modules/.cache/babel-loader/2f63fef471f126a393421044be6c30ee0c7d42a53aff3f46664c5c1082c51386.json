{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nmiln\\\\OneDrive\\\\Desktop\\\\Spotify Monthly Wrapped\\\\src\\\\components\\\\TopArtists.js\",\n  _s = $RefreshSig$();\n// components/TopArtists.js\n\nimport React, { useState, useEffect } from 'react';\nimport spotifyApi from '../spotifyAuth';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TopArtists() {\n  _s();\n  const [topArtists, setTopArtists] = useState([]);\n  const [showHeadline, setShowHeadline] = useState(false);\n  const [currentSlide, setCurrentSlide] = useState(0);\n  const [slideshow, setSlideshow] = useState(true);\n  useEffect(() => {\n    // Fetch the user's top artists\n    spotifyApi.getMyTopArtists({\n      limit: 20,\n      time_range: 'short_term'\n    }).then(response => {\n      setTopArtists(response.items);\n      setShowHeadline(true);\n    });\n  }, []);\n  useEffect(() => {\n    // Update the slideshow when topArtists changes\n    const intervalId = setInterval(() => {\n      if (slideshow) {\n        setCurrentSlide(prevSlide => (prevSlide + 1) % topArtists.length);\n      }\n    }, 2300);\n\n    // Clean up the interval when the component unmounts or topArtists changes\n    return () => clearInterval(intervalId);\n  }, [topArtists]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [showHeadline && /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Top Artists This Month\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"top-artists-container\",\n      children: topArtists.map((artist, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"top-artists-item\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"artist-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"artist-name\",\n            children: [index + 1, \". \", artist.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"artist-image\",\n            children: artist.images.length > 0 && /*#__PURE__*/_jsxDEV(\"img\", {\n              src: artist.images[0].url,\n              alt: artist.name,\n              className: \"artist-image\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 42,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 13\n        }, this)\n      }, artist.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n_s(TopArtists, \"929voB2nsMpKcnex0WyqItO+6ts=\");\n_c = TopArtists;\nexport default TopArtists;\nvar _c;\n$RefreshReg$(_c, \"TopArtists\");","map":{"version":3,"names":["React","useState","useEffect","spotifyApi","jsxDEV","_jsxDEV","TopArtists","_s","topArtists","setTopArtists","showHeadline","setShowHeadline","currentSlide","setCurrentSlide","slideshow","setSlideshow","getMyTopArtists","limit","time_range","then","response","items","intervalId","setInterval","prevSlide","length","clearInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","artist","index","name","images","src","url","alt","id","_c","$RefreshReg$"],"sources":["C:/Users/nmiln/OneDrive/Desktop/Spotify Monthly Wrapped/src/components/TopArtists.js"],"sourcesContent":["// components/TopArtists.js\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport spotifyApi from '../spotifyAuth';\r\n\r\nfunction TopArtists() {\r\n  const [topArtists, setTopArtists] = useState([]);\r\n  const [showHeadline, setShowHeadline] = useState(false);\r\n  const [currentSlide, setCurrentSlide] = useState(0);\r\n  const [slideshow , setSlideshow] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Fetch the user's top artists\r\n    spotifyApi.getMyTopArtists({ limit: 20, time_range: 'short_term' }).then((response) => {\r\n      setTopArtists(response.items);\r\n      setShowHeadline(true);\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Update the slideshow when topArtists changes\r\n    const intervalId = setInterval(() => {\r\n      if(slideshow){\r\n        setCurrentSlide((prevSlide) => (prevSlide + 1) % topArtists.length);\r\n      }\r\n    }, 2300);\r\n\r\n    // Clean up the interval when the component unmounts or topArtists changes\r\n    return () => clearInterval(intervalId);\r\n  }, [topArtists]);\r\n\r\n  return (\r\n    <div>\r\n      {showHeadline && <h2>Top Artists This Month</h2>}\r\n      <div className=\"top-artists-container\">\r\n        {topArtists.map((artist, index) => (\r\n          <div key={artist.id} className=\"top-artists-item\">\r\n            <div className=\"artist-info\">\r\n              <p className=\"artist-name\">{index + 1}. {artist.name}</p>\r\n              <div className=\"artist-image\">\r\n                {artist.images.length > 0 && (\r\n                  <img\r\n                    src={artist.images[0].url}\r\n                    alt={artist.name}\r\n                    className=\"artist-image\"\r\n                  />\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TopArtists;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}