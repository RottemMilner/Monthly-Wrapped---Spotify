{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nmiln\\\\OneDrive\\\\Desktop\\\\my-app\\\\src\\\\components\\\\FavoriteTracks.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport spotifyApi from '../spotifyAuth';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction FavoriteTracks({\n  setFavorites\n}) {\n  _s();\n  const [favorites, setFavoritesState] = useState([]);\n  const [newPlaylistName, setNewPlaylistName] = useState('');\n  useEffect(() => {\n    // Load favorites from localStorage on component mount\n    const storedFavorites = JSON.parse(localStorage.getItem('favorites')) || [];\n    setFavoritesState(storedFavorites);\n    setFavorites(storedFavorites);\n  }, [setFavorites]);\n  const handleRemoveFromFavorites = track => {\n    setFavoritesState(prevFavorites => {\n      const newFavorites = Array.isArray(prevFavorites) ? prevFavorites.filter(fav => fav.id !== track.id) : [];\n      localStorage.setItem('favorites', JSON.stringify(newFavorites)); // Save to localStorage\n      return newFavorites;\n    });\n    setFavorites(prevFavorites => {\n      return Array.isArray(prevFavorites) ? prevFavorites.filter(fav => fav.id !== track.id) : [];\n    });\n  };\n  const clearFavorites = () => {\n    localStorage.setItem('favorites', JSON.stringify([])); // Initialize as an empty array\n    setFavoritesState([]);\n  };\n  const createPlaylist = async () => {\n    try {\n      // Create a new playlist\n      const response = await spotifyApi.createPlaylist(newPlaylistName, {\n        public: false // Set to true if you want the playlist to be public\n      });\n      const playlistId = response.id;\n\n      // Get track URIs from favorites\n      const trackUris = favorites.map(track => track.uri);\n\n      // Add tracks to the playlist\n      await spotifyApi.addTracksToPlaylist(playlistId, trackUris);\n\n      // Clear the input field\n      setNewPlaylistName('');\n\n      // Optionally, you can show a success message or navigate the user to the new playlist\n      console.log('Playlist created successfully!');\n    } catch (error) {\n      console.error('Error creating playlist:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Favorites\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: clearFavorites,\n      className: \"remove-from-favorites-button\",\n      children: \"Clear Favorites\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter new playlist name\",\n      value: newPlaylistName,\n      onChange: e => setNewPlaylistName(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: createPlaylist,\n      className: \"create-playlist-button\",\n      children: \"Create Playlist\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"favorites-list\",\n      children: favorites.map(track => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"favorites-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: track.album.images[0].url,\n          alt: track.name,\n          className: \"album-art\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"track-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"track-name\",\n            children: track.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"artists\",\n            children: track.artists.map(artist => artist.name).join(', ')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleRemoveFromFavorites(track),\n            className: \"remove-from-favorites-button\",\n            children: \"Remove from Favorites\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this)]\n      }, track.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n_s(FavoriteTracks, \"qbmdwtPCGUTKDkB2XbkuK/cXdmk=\");\n_c = FavoriteTracks;\nFavoriteTracks.propTypes = {\n  favorites: PropTypes.array.isRequired,\n  removeFromFavorites: PropTypes.func.isRequired\n};\nexport default FavoriteTracks;\nvar _c;\n$RefreshReg$(_c, \"FavoriteTracks\");","map":{"version":3,"names":["React","useState","useEffect","PropTypes","spotifyApi","jsxDEV","_jsxDEV","FavoriteTracks","setFavorites","_s","favorites","setFavoritesState","newPlaylistName","setNewPlaylistName","storedFavorites","JSON","parse","localStorage","getItem","handleRemoveFromFavorites","track","prevFavorites","newFavorites","Array","isArray","filter","fav","id","setItem","stringify","clearFavorites","createPlaylist","response","public","playlistId","trackUris","map","uri","addTracksToPlaylist","console","log","error","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","className","type","placeholder","value","onChange","e","target","src","album","images","url","alt","name","artists","artist","join","_c","propTypes","array","isRequired","removeFromFavorites","func","$RefreshReg$"],"sources":["C:/Users/nmiln/OneDrive/Desktop/my-app/src/components/FavoriteTracks.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport spotifyApi from '../spotifyAuth';\r\n\r\nfunction FavoriteTracks({ setFavorites }) {\r\n  const [favorites, setFavoritesState] = useState([]);\r\n  const [newPlaylistName, setNewPlaylistName] = useState('');\r\n\r\n  useEffect(() => {\r\n    // Load favorites from localStorage on component mount\r\n    const storedFavorites = JSON.parse(localStorage.getItem('favorites')) || [];\r\n    setFavoritesState(storedFavorites);\r\n    setFavorites(storedFavorites);\r\n  }, [setFavorites]);\r\n\r\n  const handleRemoveFromFavorites = (track) => {\r\n    setFavoritesState((prevFavorites) => {\r\n      const newFavorites = Array.isArray(prevFavorites)\r\n        ? prevFavorites.filter((fav) => fav.id !== track.id)\r\n        : [];\r\n      localStorage.setItem('favorites', JSON.stringify(newFavorites)); // Save to localStorage\r\n      return newFavorites;\r\n    });\r\n\r\n    setFavorites((prevFavorites) => {\r\n      return Array.isArray(prevFavorites)\r\n        ? prevFavorites.filter((fav) => fav.id !== track.id)\r\n        : [];\r\n    });\r\n  };\r\n\r\n  const clearFavorites = () => {\r\n    localStorage.setItem('favorites', JSON.stringify([])); // Initialize as an empty array\r\n    setFavoritesState([]);\r\n  };\r\n\r\n  const createPlaylist = async () => {\r\n    try {\r\n      // Create a new playlist\r\n      const response = await spotifyApi.createPlaylist(newPlaylistName, {\r\n        public: false, // Set to true if you want the playlist to be public\r\n      });\r\n\r\n      const playlistId = response.id;\r\n\r\n      // Get track URIs from favorites\r\n      const trackUris = favorites.map((track) => track.uri);\r\n\r\n      // Add tracks to the playlist\r\n      await spotifyApi.addTracksToPlaylist(playlistId, trackUris);\r\n\r\n      // Clear the input field\r\n      setNewPlaylistName('');\r\n\r\n      // Optionally, you can show a success message or navigate the user to the new playlist\r\n      console.log('Playlist created successfully!');\r\n    } catch (error) {\r\n      console.error('Error creating playlist:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Favorites</h2>\r\n      <button onClick={clearFavorites} className=\"remove-from-favorites-button\">\r\n        Clear Favorites\r\n      </button>\r\n\r\n      {/* Input field for new playlist name */}\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Enter new playlist name\"\r\n        value={newPlaylistName}\r\n        onChange={(e) => setNewPlaylistName(e.target.value)}\r\n      />\r\n      \r\n      {/* Button to create playlist */}\r\n      <button onClick={createPlaylist} className=\"create-playlist-button\">\r\n        Create Playlist\r\n      </button>\r\n\r\n      <ul className=\"favorites-list\">\r\n        {favorites.map((track) => (\r\n          <li key={track.id} className=\"favorites-item\">\r\n            <img src={track.album.images[0].url} alt={track.name} className=\"album-art\" />\r\n            <div className=\"track-info\">\r\n              <p className=\"track-name\">{track.name}</p>\r\n              <p className=\"artists\">{track.artists.map((artist) => artist.name).join(', ')}</p>\r\n              <button onClick={() => handleRemoveFromFavorites(track)} className=\"remove-from-favorites-button\">\r\n                Remove from Favorites\r\n              </button>\r\n            </div>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nFavoriteTracks.propTypes = {\r\n  favorites: PropTypes.array.isRequired,\r\n  removeFromFavorites: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default FavoriteTracks;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}