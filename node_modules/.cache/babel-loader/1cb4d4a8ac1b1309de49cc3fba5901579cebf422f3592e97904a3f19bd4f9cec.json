{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nmiln\\\\my-app\\\\src\\\\components\\\\TopTracks.js\",\n  _s = $RefreshSig$();\n// components/TopTracks/TopTracks.js\n\nimport React, { useState, useEffect } from 'react';\nimport spotifyApi from '../spotifyAuth';\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TopTracks({\n  setFavorites\n}) {\n  _s();\n  const [topTracks, setTopTracks] = useState([]);\n  const [favorites, setFavoritesState] = useState([]);\n  const [showHeadline, setShowHeadline] = useState(false);\n  useEffect(() => {\n    // Load favorites from localStorage on component mount\n    const storedFavorites = JSON.parse(localStorage.getItem('favorites')) || [];\n    setFavoritesState(storedFavorites);\n    setFavorites(storedFavorites);\n\n    // Fetch the user's top tracks\n    spotifyApi.getMyTopTracks({\n      limit: 50,\n      time_range: 'short_term'\n    }).then(response => {\n      setTopTracks(response.items);\n      setShowHeadline(true); // Set to true after fetching data\n    });\n  }, []);\n  const isTrackInFavorites = track => {\n    return favorites && favorites.some(fav => fav.id === track.track.id);\n  };\n  const handleAddToFavorites = track => {\n    setFavoritesState(prevFavorites => {\n      const newFavorites = Array.isArray(prevFavorites) ? [...prevFavorites] : [];\n      newFavorites.push(track.track);\n      localStorage.setItem('favorites', JSON.stringify(newFavorites)); // Save to localStorage\n      return newFavorites;\n    });\n    setFavorites(prevFavorites => {\n      const newFavorites = Array.isArray(prevFavorites) ? [...prevFavorites] : [];\n      newFavorites.push(track.track);\n      return newFavorites;\n    });\n  };\n  const handleRemoveFromFavorites = track => {\n    setFavoritesState(prevFavorites => {\n      const newFavorites = Array.isArray(prevFavorites) ? prevFavorites.filter(fav => fav.id !== track.track.id) : [];\n      localStorage.setItem('favorites', JSON.stringify(newFavorites)); // Save to localStorage\n      return newFavorites;\n    });\n    setFavorites(prevFavorites => {\n      return Array.isArray(prevFavorites) ? prevFavorites.filter(fav => fav.id !== track.track.id) : [];\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [showHeadline && /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Top Tracks\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"top-tracks-list\",\n      children: topTracks.map(track => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"top-tracks-item\",\n        children: [track.album.images.length > 0 && /*#__PURE__*/_jsxDEV(\"img\", {\n          src: track.album.images[2].url // Assuming you want to display the album art\n          ,\n          alt: track.name,\n          className: \"track-image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"track-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"track-name\",\n            children: track.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"artists\",\n            children: track.artists.map(artist => artist.name).join(', ')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 15\n          }, this), isTrackInFavorites(track) ? /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleRemoveFromFavorites(track),\n            className: \"remove-from-favorites-button\",\n            children: \"Remove from Favorites\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleAddToFavorites(track),\n            className: \"add-to-favorites-button\",\n            children: \"Add to Favorites\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this)]\n      }, track.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n_s(TopTracks, \"vpJoG5VBsXp5Yz8yABQM8KSGMXY=\");\n_c = TopTracks;\nTopTracks.propTypes = {\n  setFavorites: PropTypes.func.isRequired\n};\nexport default TopTracks;\nvar _c;\n$RefreshReg$(_c, \"TopTracks\");","map":{"version":3,"names":["React","useState","useEffect","spotifyApi","PropTypes","jsxDEV","_jsxDEV","TopTracks","setFavorites","_s","topTracks","setTopTracks","favorites","setFavoritesState","showHeadline","setShowHeadline","storedFavorites","JSON","parse","localStorage","getItem","getMyTopTracks","limit","time_range","then","response","items","isTrackInFavorites","track","some","fav","id","handleAddToFavorites","prevFavorites","newFavorites","Array","isArray","push","setItem","stringify","handleRemoveFromFavorites","filter","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","album","images","length","src","url","alt","name","artists","artist","join","onClick","_c","propTypes","func","isRequired","$RefreshReg$"],"sources":["C:/Users/nmiln/my-app/src/components/TopTracks.js"],"sourcesContent":["// components/TopTracks/TopTracks.js\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport spotifyApi from '../spotifyAuth';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction TopTracks({ setFavorites }) {\r\n  const [topTracks, setTopTracks] = useState([]);\r\n  const [favorites, setFavoritesState] = useState([]);\r\n  const [showHeadline, setShowHeadline] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // Load favorites from localStorage on component mount\r\n    const storedFavorites = JSON.parse(localStorage.getItem('favorites')) || [];\r\n    setFavoritesState(storedFavorites);\r\n    setFavorites(storedFavorites);\r\n\r\n    // Fetch the user's top tracks\r\n    spotifyApi.getMyTopTracks({ limit: 50, time_range: 'short_term' }).then((response) => {\r\n      setTopTracks(response.items);\r\n      setShowHeadline(true); // Set to true after fetching data\r\n    });\r\n  }, []);\r\n\r\n  const isTrackInFavorites = (track) => {\r\n    return favorites && favorites.some((fav) => fav.id === track.track.id);\r\n  };\r\n\r\n  const handleAddToFavorites = (track) => {\r\n    setFavoritesState((prevFavorites) => {\r\n      const newFavorites = Array.isArray(prevFavorites) ? [...prevFavorites] : [];\r\n      newFavorites.push(track.track);\r\n      localStorage.setItem('favorites', JSON.stringify(newFavorites)); // Save to localStorage\r\n      return newFavorites;\r\n    });\r\n\r\n    setFavorites((prevFavorites) => {\r\n      const newFavorites = Array.isArray(prevFavorites) ? [...prevFavorites] : [];\r\n      newFavorites.push(track.track);\r\n      return newFavorites;\r\n    });\r\n  };\r\n\r\n  const handleRemoveFromFavorites = (track) => {\r\n    setFavoritesState((prevFavorites) => {\r\n      const newFavorites = Array.isArray(prevFavorites)\r\n        ? prevFavorites.filter((fav) => fav.id !== track.track.id)\r\n        : [];\r\n      localStorage.setItem('favorites', JSON.stringify(newFavorites)); // Save to localStorage\r\n      return newFavorites;\r\n    });\r\n\r\n    setFavorites((prevFavorites) => {\r\n      return Array.isArray(prevFavorites)\r\n        ? prevFavorites.filter((fav) => fav.id !== track.track.id)\r\n        : [];\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {showHeadline && <h2>Top Tracks</h2>}\r\n      <ul className=\"top-tracks-list\">\r\n        {topTracks.map((track) => (\r\n          <li key={track.id} className=\"top-tracks-item\">\r\n            {track.album.images.length > 0 && (\r\n              <img\r\n                src={track.album.images[2].url} // Assuming you want to display the album art\r\n                alt={track.name}\r\n                className=\"track-image\"\r\n              />\r\n            )}\r\n            <div className=\"track-info\">\r\n              <p className=\"track-name\">{track.name}</p>\r\n              <p className=\"artists\">{track.artists.map((artist) => artist.name).join(', ')}</p>\r\n              {isTrackInFavorites(track) ? (\r\n                <button\r\n                  onClick={() => handleRemoveFromFavorites(track)}\r\n                  className=\"remove-from-favorites-button\"\r\n                >\r\n                  Remove from Favorites\r\n                </button>\r\n              ) : (\r\n                <button\r\n                  onClick={() => handleAddToFavorites(track)}\r\n                  className=\"add-to-favorites-button\"\r\n                >\r\n                  Add to Favorites\r\n                </button>\r\n              )}\r\n            </div>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nTopTracks.propTypes = {\r\n  setFavorites: PropTypes.func.isRequired,\r\n};\r\n\r\n\r\nexport default TopTracks;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}