{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nmiln\\\\OneDrive\\\\Desktop\\\\Spotify Monthly Wrapped\\\\src\\\\components\\\\TopTracks.js\",\n  _s = $RefreshSig$();\n// components/TopTracks.js\n\nimport React, { useState, useEffect } from 'react';\nimport spotifyApi from '../spotifyAuth';\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TopTracks({\n  user\n}) {\n  _s();\n  const [topTracks, setTopTracks] = useState([]);\n  const [favorites, setFavoritesState] = useState([]);\n  const [showHeadline, setShowHeadline] = useState(false);\n  const [playlistId, setPlaylistId] = useState(null);\n  useEffect(() => {\n    // Fetch the user's top tracks\n    spotifyApi.getMyTopTracks({\n      limit: 50,\n      time_range: 'short_term'\n    }).then(response => {\n      setTopTracks(response.items);\n      setShowHeadline(true); // Set to true after fetching data\n\n      // Check if playlist is already created\n      const storedPlaylistId = localStorage.getItem('playlistId');\n      if (storedPlaylistId) {\n        setPlaylistId(storedPlaylistId);\n      }\n    });\n  }, [user]);\n  const getCurrentMonthAndYear = () => {\n    const currentDate = new Date();\n    const monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n    const currentMonth = monthNames[currentDate.getMonth()];\n    const currentYear = currentDate.getFullYear();\n    return `${currentMonth} ${currentYear}`;\n  };\n  const handleCreatePlaylist = async () => {\n    // Implement logic to create a playlist with top tracks\n    // Use the user.id, topTracks, and Spotify API\n    // Example:\n    const playlistName = `Top Tracks of ${getCurrentMonthAndYear()}`;\n    const playlistDescription = `A playlist of your top 50 tracks in ${getCurrentMonthAndYear()}.`;\n    spotifyApi.createPlaylist(user.id, {\n      name: playlistName,\n      public: false,\n      // Set to true if you want the playlist to be public\n      description: playlistDescription\n    }).then(playlist => {\n      setPlaylistId(playlist.id); // Store the playlist ID\n      localStorage.setItem('playlistId', playlist.id); // Store in local storage\n      const trackUris = topTracks.map(track => track.uri);\n      spotifyApi.addTracksToPlaylist(playlist.id, trackUris).then(() => {\n        // Playlist created successfully\n        console.log('Playlist created successfully!');\n      });\n    });\n  };\n  const handleDeletePlaylist = () => {\n    // Delete the playlist using the stored playlistId\n    if (playlistId) {\n      spotifyApi.unfollowPlaylist(playlistId).then(() => {\n        // Playlist deleted successfully\n        console.log('Playlist deleted successfully!');\n        setPlaylistId(null); // Reset the playlist ID in the state\n        localStorage.removeItem('playlistId'); // Remove from local storage\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [showHeadline && /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Top Tracks This Month\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 24\n    }, this), playlistId ? /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleDeletePlaylist,\n      className: \"clear-favorites-button\",\n      children: \"Delete Playlist\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleCreatePlaylist,\n      className: \"search-button\",\n      children: \"Create Playlist\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"top-tracks-list\",\n      children: topTracks.map(track => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"top-tracks-item\",\n        children: [track.album.images.length > 0 && /*#__PURE__*/_jsxDEV(\"img\", {\n          src: track.album.images[0].url // Assuming you want to display the album art\n          ,\n          alt: track.name,\n          className: \"track-image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"track-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"track-name\",\n            children: track.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"artists\",\n            children: track.artists.map(artist => artist.name).join(', ')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this)]\n      }, track.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}\n_s(TopTracks, \"h7P6uOd8zhEr1bSwWobhYbqhRt0=\");\n_c = TopTracks;\nTopTracks.propTypes = {\n  user: PropTypes.object.isRequired\n};\nexport default TopTracks;\nvar _c;\n$RefreshReg$(_c, \"TopTracks\");","map":{"version":3,"names":["React","useState","useEffect","spotifyApi","PropTypes","jsxDEV","_jsxDEV","TopTracks","user","_s","topTracks","setTopTracks","favorites","setFavoritesState","showHeadline","setShowHeadline","playlistId","setPlaylistId","getMyTopTracks","limit","time_range","then","response","items","storedPlaylistId","localStorage","getItem","getCurrentMonthAndYear","currentDate","Date","monthNames","currentMonth","getMonth","currentYear","getFullYear","handleCreatePlaylist","playlistName","playlistDescription","createPlaylist","id","name","public","description","playlist","setItem","trackUris","map","track","uri","addTracksToPlaylist","console","log","handleDeletePlaylist","unfollowPlaylist","removeItem","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","className","album","images","length","src","url","alt","artists","artist","join","_c","propTypes","object","isRequired","$RefreshReg$"],"sources":["C:/Users/nmiln/OneDrive/Desktop/Spotify Monthly Wrapped/src/components/TopTracks.js"],"sourcesContent":["// components/TopTracks.js\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport spotifyApi from '../spotifyAuth';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction TopTracks({ user }) {\r\n  const [topTracks, setTopTracks] = useState([]);\r\n  const [favorites, setFavoritesState] = useState([]);\r\n  const [showHeadline, setShowHeadline] = useState(false);\r\n  const [playlistId, setPlaylistId] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Fetch the user's top tracks\r\n    spotifyApi.getMyTopTracks({ limit: 50, time_range: 'short_term' }).then((response) => {\r\n      setTopTracks(response.items);\r\n      setShowHeadline(true); // Set to true after fetching data\r\n\r\n      // Check if playlist is already created\r\n      const storedPlaylistId = localStorage.getItem('playlistId');\r\n      if (storedPlaylistId) {\r\n        setPlaylistId(storedPlaylistId);\r\n      }\r\n    });\r\n  }, [user]);\r\n\r\n  const getCurrentMonthAndYear = () => {\r\n    const currentDate = new Date();\r\n    const monthNames = [\r\n      'January', 'February', 'March', 'April', 'May', 'June',\r\n      'July', 'August', 'September', 'October', 'November', 'December'\r\n    ];\r\n\r\n    const currentMonth = monthNames[currentDate.getMonth()];\r\n    const currentYear = currentDate.getFullYear();\r\n\r\n    return `${currentMonth} ${currentYear}`;\r\n  };\r\n\r\n  const handleCreatePlaylist = async () => {\r\n    // Implement logic to create a playlist with top tracks\r\n    // Use the user.id, topTracks, and Spotify API\r\n    // Example:\r\n    const playlistName = `Top Tracks of ${getCurrentMonthAndYear()}`;\r\n    const playlistDescription = `A playlist of your top 50 tracks in ${getCurrentMonthAndYear()}.`;\r\n    spotifyApi.createPlaylist(user.id, {\r\n      name: playlistName,\r\n      public: false, // Set to true if you want the playlist to be public\r\n      description: playlistDescription,\r\n    }).then((playlist) => {\r\n      setPlaylistId(playlist.id); // Store the playlist ID\r\n      localStorage.setItem('playlistId', playlist.id); // Store in local storage\r\n      const trackUris = topTracks.map((track) => track.uri);\r\n      spotifyApi.addTracksToPlaylist(playlist.id, trackUris).then(() => {\r\n        // Playlist created successfully\r\n        console.log('Playlist created successfully!');\r\n      });\r\n    });\r\n  };\r\n\r\n  const handleDeletePlaylist = () => {\r\n    // Delete the playlist using the stored playlistId\r\n    if (playlistId) {\r\n      spotifyApi.unfollowPlaylist(playlistId).then(() => {\r\n        // Playlist deleted successfully\r\n        console.log('Playlist deleted successfully!');\r\n        setPlaylistId(null); // Reset the playlist ID in the state\r\n        localStorage.removeItem('playlistId'); // Remove from local storage\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {showHeadline && <h2>Top Tracks This Month</h2>}\r\n      {playlistId ? (\r\n        <button onClick={handleDeletePlaylist} className=\"clear-favorites-button\">Delete Playlist</button>\r\n      ) : (\r\n        <button onClick={handleCreatePlaylist} className=\"search-button\">Create Playlist</button>\r\n      )}\r\n      <ul className=\"top-tracks-list\">\r\n        {topTracks.map((track) => (\r\n          <li key={track.id} className=\"top-tracks-item\">\r\n            {track.album.images.length > 0 && (\r\n              <img\r\n                src={track.album.images[0].url} // Assuming you want to display the album art\r\n                alt={track.name}\r\n                className=\"track-image\"\r\n              />\r\n            )}\r\n            <div className=\"track-info\">\r\n              <p className=\"track-name\">{track.name}</p>\r\n              <p className=\"artists\">{track.artists.map((artist) => artist.name).join(', ')}</p>\r\n            </div>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nTopTracks.propTypes = {\r\n  user: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default TopTracks;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}